<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>voya</title>
  <subtitle>像孩子一样写代码</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.voyax.me/"/>
  <updated>2017-07-26T08:38:20.000Z</updated>
  <id>http://www.voyax.me/</id>
  
  <author>
    <name>voya</name>
    <email>voyax3@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS 小白知识点－布局</title>
    <link href="http://www.voyax.me/posts/5a12aef0/"/>
    <id>http://www.voyax.me/posts/5a12aef0/</id>
    <published>2017-07-26T07:37:56.000Z</published>
    <updated>2017-07-26T08:38:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>过年那天写的，写了一半出去玩了，没写完，啦啦啦</p>
</blockquote>
<h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>在去Google <strong>块级元素</strong>、<strong>行内元素</strong>有什么区别之前，先搞明白CSS中的<code>display</code>，<code>display</code>是控制布局的关键，所有元素以什么样的角色展现，都是由<code>display</code>来控制的。</p>
<a id="more"></a>
<blockquote>
<p>The display CSS property specifies the type of rendering box used for an element. In HTML, default display property values are taken from behaviors described in the HTML specifications or from the browser/user default stylesheet. The default value in XML is inline.——<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="external">MDN/CSS/display</a></p>
</blockquote>
<p>我们说过，页面中的每个元素都是一个盒子，但盒子也分不同的类型，<code>block</code>、<code>inline</code>，就是大多数元素的默认类型。元素以什么样的方式展现出来，不是根据它是什么元素，而是由<code>display</code>属性决定。</p>
<h3 id="举例说明——块级元素、行内元素"><a href="#举例说明——块级元素、行内元素" class="headerlink" title="举例说明——块级元素、行内元素"></a>举例说明——块级元素、行内元素</h3><p>常说的<strong>块级元素</strong>和<strong>行内元素</strong>实际包含两个方面：</p>
<ol>
<li><p>HTML的嵌套规则</p>
<p>一般块级元素可以包含行内元素和其他块级元素，而行内元素内不可嵌套块级元素</p>
</li>
<li><p>用户代理默认<code>display</code>属性值</p>
<p> W3C为元素指定了默认的<code>display</code>值，用户代理（浏览器）根据W3C的标准，实现默认的样式规则。</p>
<p> <strong>W3C标准：</strong><br> <img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-21-083030.jpg" alt=""></p>
<p> <strong>浏览器默认样式</strong></p>
<p> <img src="media/14821269803155.jpg" alt=""></p>
<p> 注： HTML5中已经没有行内元素和块级元素的概念，详细参见<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories" target="_blank" rel="external">Content categories</a>，块级元素大致相当于HTML5中的<strong>Flow Elements</strong>，行内元素相当于<strong>Phrasing Elements</strong></p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>元素以什么样的盒子渲染，是通过<strong>display</strong>属性控制，而非元素类型</li>
<li>浏览器默认样式为每个元素设置了<code>display</code>默认值</li>
<li><code>display</code>默认值是<code>inline</code>（比如，某些浏览器不认识HTML5中的标签，这些元素的<code>display</code>属性值就很悲剧都成<code>inline</code>了）</li>
<li>通过<code>display</code>仅仅是改变元素的显示方式，并非改变元素类型</li>
</ul>
<p><code>display</code>还有很多属性值，感兴趣的参看<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="external">MDN display章节</a></p>
<h2 id="Block-inline-inline-block"><a href="#Block-inline-inline-block" class="headerlink" title="Block, inline, inline-block"></a>Block, inline, inline-block</h2><p>这三个属性值是布局中无论如何你都避免不了的，看看它们的区别，分别看看一个<code>p</code>标签<code>display</code>属性值为<code>block</code>，<code>inline</code>，<code>inline-block</code>的区别：</p>
<p><strong>HTML</strong></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      block, <span class="keyword">inline</span>, <span class="keyword">inline</span>-block举例：接下来是一个p标签：&lt;p&gt;<span class="built_in">display</span>: block&lt;/p&gt;，这是p标签之后的内容。</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      block, <span class="keyword">inline</span>, <span class="keyword">inline</span>-block举例：接下来是一个p标签，<span class="built_in">display</span>设置为<span class="keyword">inline</span>：&lt;p class=<span class="string">"inline"</span>&gt;<span class="built_in">display</span>: <span class="keyword">inline</span>;&lt;/p&gt;，这是p标签之后的内容。</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      block, <span class="keyword">inline</span>, <span class="keyword">inline</span>-block举例：接下来是一个p标签，<span class="built_in">display</span>设置为<span class="keyword">inline</span>-block：&lt;p class=<span class="string">"inline-block"</span>&gt;<span class="built_in">display</span>: <span class="keyword">inline</span>-block&lt;/p&gt;，这是p标签之后的内容。</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p><strong>CSS</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#77C2D4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">2em</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">1em</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#F9454E</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.inline</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.inline-block</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>效果图</strong></p>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-18-110247.jpg" alt=""></p>
<p>第一个p标签，默认是<code>block</code>。<code>height</code>，<code>width</code>，<code>margin-top</code>，<code>padding-left</code>均有效，单独占一行，<em>注意它的margin-left/right和width的关系！</em></p>
<p>第二个p标签，<code>dislplay: inline</code>。<code>height</code>，<code>width</code>，<code>margin-top</code>都无效了</p>
<p>第三个p标签，<code>display: inline-block</code>。一切正常，而且不换行</p>
<h3 id="block-inline-inline-block-总结"><a href="#block-inline-inline-block-总结" class="headerlink" title="block, inline, inline-block 总结"></a>block, inline, inline-block 总结</h3><p><strong>block</strong></p>
<ul>
<li>（默认）宽度：等于父元素content的宽度</li>
<li>（默认）高度：由子元素高度确定</li>
<li>width、height 可设置</li>
<li>单独占一行</li>
</ul>
<p><strong>inline</strong></p>
<ul>
<li>设置<code>width</code>和<code>height</code>无效</li>
<li><code>margin</code>和<code>padding</code> 垂直方向上设置无效</li>
<li>只要宽度足够，从左往右（对于从左往右阅读的语言）挨个排列</li>
</ul>
<p><strong>inline-block</strong></p>
<p><code>inline-block</code>继承了<code>inline</code>和<code>block</code>的特点，W3chools的总结简直完美：</p>
<blockquote>
<p>An inline-block element is <strong>placed</strong> as an inline element (on the same line as adjacent content), but it <strong>behaves</strong> as a block element.</p>
</blockquote>
<ul>
<li>可设置<code>width</code>和<code>height</code></li>
<li><code>margin</code>和<code>padding</code>垂直方向上有效</li>
<li>不换行</li>
</ul>
<p><a href="http://quirksmode.org/css/css2/display.html" target="_blank" rel="external">The Display Declaration</a>这篇文章有更多的<code>display</code>属性的演示和说明</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;过年那天写的，写了一半出去玩了，没写完，啦啦啦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;display&quot;&gt;&lt;a href=&quot;#display&quot; class=&quot;headerlink&quot; title=&quot;display&quot;&gt;&lt;/a&gt;display&lt;/h2&gt;&lt;p&gt;在去Google &lt;strong&gt;块级元素&lt;/strong&gt;、&lt;strong&gt;行内元素&lt;/strong&gt;有什么区别之前，先搞明白CSS中的&lt;code&gt;display&lt;/code&gt;，&lt;code&gt;display&lt;/code&gt;是控制布局的关键，所有元素以什么样的角色展现，都是由&lt;code&gt;display&lt;/code&gt;来控制的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;The display CSS property specifies the type of rendering box used for an element. In HTML, default display property values are taken from behaviors described in the HTML specifications or from the browser/user default stylesheet. The default value in XML is inline.——&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/display&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN/CSS/display&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们说过，页面中的每个元素都是一个盒子，但盒子也分不同的类型，&lt;code&gt;block&lt;/code&gt;、&lt;code&gt;inline&lt;/code&gt;，就是大多数元素的默认类型。元素以什么样的方式展现出来，不是根据它是什么元素，而是由&lt;code&gt;display&lt;/code&gt;属性决定。&lt;/p&gt;
&lt;h3 id=&quot;举例说明——块级元素、行内元素&quot;&gt;&lt;a href=&quot;#举例说明——块级元素、行内元素&quot; class=&quot;headerlink&quot; title=&quot;举例说明——块级元素、行内元素&quot;&gt;&lt;/a&gt;举例说明——块级元素、行内元素&lt;/h3&gt;&lt;p&gt;常说的&lt;strong&gt;块级元素&lt;/strong&gt;和&lt;strong&gt;行内元素&lt;/strong&gt;实际包含两个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;HTML的嵌套规则&lt;/p&gt;
&lt;p&gt;一般块级元素可以包含行内元素和其他块级元素，而行内元素内不可嵌套块级元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户代理默认&lt;code&gt;display&lt;/code&gt;属性值&lt;/p&gt;
&lt;p&gt; W3C为元素指定了默认的&lt;code&gt;display&lt;/code&gt;值，用户代理（浏览器）根据W3C的标准，实现默认的样式规则。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;W3C标准：&lt;/strong&gt;&lt;br&gt; &lt;img src=&quot;http://oe54phg1r.bkt.clouddn.com/blog/2016-12-21-083030.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;浏览器默认样式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;media/14821269803155.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 注： HTML5中已经没有行内元素和块级元素的概念，详细参见&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Content categories&lt;/a&gt;，块级元素大致相当于HTML5中的&lt;strong&gt;Flow Elements&lt;/strong&gt;，行内元素相当于&lt;strong&gt;Phrasing Elements&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;
    
    </summary>
    
      <category term="css-tutorial" scheme="http://www.voyax.me/categories/css-tutorial/"/>
    
    
      <category term="CSS" scheme="http://www.voyax.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 小白知识点－盒模型</title>
    <link href="http://www.voyax.me/posts/d875308f/"/>
    <id>http://www.voyax.me/posts/d875308f/</id>
    <published>2017-07-26T07:37:43.000Z</published>
    <updated>2017-07-26T07:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>CSS假定每个元素都会生成一个或者多个矩形框，这称为元素框（规范的将来版本可能允许非矩形框，不过对现在来说，框都是矩形的）。各元素框中心有一个内容区（content area）。这个内容区周围有可选的内边框、边框和外边框。——《CSS权威指南》</p>
</blockquote>
<p>任何一个页面，都是由一个一个的盒子构成；而每个元素，其实都是一个矩形盒子，也就是所谓的盒模型；所以，写一个页面，无非就是把这些盒子按照一定方式进行排列，是不很简单——凡是都是盒子</p>
<p>以Google的开发者网站来展示：</p>
<a id="more"></a>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-14-Google%20Developers%E5%89%AF%E6%9C%AC.png" alt=""></p>
<p>先拆分成两个大盒子（红色虚线标准），然后在每个大盒子中又包括很多小盒子（你看，文字也是由矩形框包围起来的），把这些盒子进行布局排版，再加上视觉效果，这个页面就可以写出来了。</p>
<h2 id="盒模型基本结构"><a href="#盒模型基本结构" class="headerlink" title="盒模型基本结构"></a>盒模型基本结构</h2><p>扯了这么多，具体看看一个盒子是怎么样的：</p>
<p><img src="http://ogv9dph1e.bkt.clouddn.com/box-model.svg" alt=""></p>
<p>一个盒子，从内到外，分别是<code>content(内容区域)</code>、<code>padding内边距</code>、<code>border(边框)</code>、<code>margin(外边距)</code>；</p>
<p>而 <code>padding</code> , <code>border</code> , <code>margin</code> 都可以对 <code>top</code>, <code>right</code>,<code>bottom</code>,<code>left</code>4个方向单独进行设置。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">300px</span>; <span class="comment">/* content 高度 */</span></div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;  <span class="comment">/* content 宽度 */</span></div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;  <span class="comment">/* 上下左右都是1px的边框，颜色为#333的实线 */</span></div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">80px</span>; <span class="comment">/* 仅设置 margin top */</span></div><div class="line">  <span class="attribute">padding</span>: <span class="number">40px</span>; <span class="comment">/* 上下左右都是 40px padding */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体说下padding,margin四个方向的设置：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">25px</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">40px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">40px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>等同于</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">25px</span> <span class="number">40px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>等同于</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">25px</span> <span class="number">40px</span> <span class="number">25px</span> <span class="number">40px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看明白了呗，设置padding或者margin的上下左右四个值，你可以单独用</p>
<p><code>padding/margin-top</code>,<code>padding/margin-bottom</code>,<code>padding/margin-left</code>,<code>padding/margin-right</code></p>
<p>有时候也可以直接为<code>padding/margin</code>设置4个值（顺序固定），从<code>top</code>顺时针绕一圈：</p>
<p><code>padding/margin: top right bottom left</code></p>
<p>还可以为<code>padding</code>, <code>margin</code>指定少于4个值，规则如下</p>
<blockquote>
<p>如果缺少<strong>左外边距</strong>，则使用<strong>右外边距</strong><br>如果缺少<strong>下外边距</strong>，则使用<strong>上外边距</strong><br>如果缺少<strong>右外边距</strong>，则使用<strong>上外边距</strong></p>
</blockquote>
<h3 id="padding和margin的区别"><a href="#padding和margin的区别" class="headerlink" title="padding和margin的区别"></a>padding和margin的区别</h3><p>为了便于理解，你可以认为，<code>margin</code>是不属于这个盒子的，仅仅是为了占据空间；而<code>padding</code>是作为盒子的一部分。</p>
<h4 id="从视觉上来讲"><a href="#从视觉上来讲" class="headerlink" title="从视觉上来讲"></a>从视觉上来讲</h4><p>padding的颜色是跟背景色一样的，所以你给元素设置了背景色，padding也会受影响；而margin永远都透明的。</p>
<h4 id="从实践来看"><a href="#从实践来看" class="headerlink" title="从实践来看"></a>从实践来看</h4><ul>
<li><p><code>margin</code>和<code>padding</code>都可以用来把盒子和盒子分开</p>
<p>  但是<code>padding</code>还可以把内容和<code>border</code>分开</p>
</li>
<li><p><code>margin</code>存在Margin Collapse的特点，<code>padding</code>不会存在</p>
<p>  Margin Collapse`深入的内容，参看<a href="http://www.voyax.me/2016/09/21/CSS-margin-collapse-解惑/">透析Margin Collapsing</a></p>
</li>
</ul>
<p>建议：实际开发看着办就好，只要保持用margin和padding使用习惯上的统一就OK</p>
<p>更多关于<code>margin</code>和<code>padding</code>的讨论，参见 <a href="http://stackoverflow.com/questions/2189452/when-to-use-margin-vs-padding-in-css" target="_blank" rel="external">When to use margin vs padding in CSS</a></p>
<h2 id="Box-Sizing"><a href="#Box-Sizing" class="headerlink" title="Box Sizing"></a>Box Sizing</h2><p>写 CSS 的时候，在 margin、padding、border存在的情况下，盒子实际占据的空间可能和预期不同，我们需要确定在 CSS 中 width，height 到底是包含哪些部分（content, padding, margin, border），具体的计算规则由 box-sizing 指定。</p>
<p>已知一个盒子的规则如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问：这个盒子实际占据空间多大？</p>
<p>正确的计算如下：<br>实际占据空间宽度 = </p>
<p>width(300) + padding-left(5) + padding-right(5) + border-left(2) + border-right(2)</p>
<p>= 314px</p>
<h3 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h3><p>我们的盒子的<code>box-sizing</code>默认值是<code>content-box</code>：<code>height</code>和<code>width</code>仅仅是<code>content</code>的高度和宽度，并不包括<code>padding</code>和<code>border</code>。所以你在考虑这个盒子占用的空间时，需要手动算上<code>padding</code>和<code>border</code>。</p>
<p>有时候莫名其妙水平方向有了滚动条、或则父元素宽度不够，都是因为忽略了<code>padding</code>和<code>border</code>的宽度。</p>
<p>下边的这个列子会因为border的存在而出现滚动条：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.box</span>&#123;</div><div class="line">      <span class="attribute">border-left</span>: <span class="number">2px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>Content Box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h3><p>如果将<code>box-sizing</code>设置为<code>border-box</code>，高度和宽度就会包含<code>padding</code>和<code>border</code>，这样才符合我们的习惯。</p>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-14-compare_box-sizing.png" alt=""></p>
<p>修改上面的例子，避免出现滚动条，设置成<code>border-box</code>就好了：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="box-sizing-实战应用"><a href="#box-sizing-实战应用" class="headerlink" title="box-sizing 实战应用"></a>box-sizing 实战应用</h3><p>为了避免不必要的麻烦，建议将所有元素都设置成<code>border-box</code>，推荐写法：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，是通过为根元素<code>html</code>设置<code>border-box</code>，其他元素继承实现的，而不是像这样：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想想区别在哪，有啥好处</p>
<p>解释在这：<a href="https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/" target="_blank" rel="external">box-sizing best practices</a></p>
<h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>不管是 <code>div</code> 也好， <code>a</code> 标签也好，在页面中都是一个盒模型的实例，但每个盒子因为 <code>display</code>属性不同，又可以分为不同的类别（<code>inline</code>, <code>block</code>, <code>inline-block</code>, <code>table</code> 等），在排版上有各自的特点。</p>
<blockquote>
<p>The display CSS property specifies the type of rendering box used for an element. In HTML, default display property values are taken from behaviors described in the HTML specifications or from the browser/user default stylesheet. The default value in XML is inline.——<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="external">MDN/CSS/display</a></p>
</blockquote>
<p>我们说过，页面中的每个元素都是一个盒子，<code>block</code>、<code>inline</code> 是大多数元素的默认类型。元素以什么样的方式展现出来，不是根据它是什么元素，而是由<code>display</code>属性决定。</p>
<p><strong>举例说明——块级元素、行内元素</strong></p>
<p>常说的<strong>块级元素</strong>和<strong>行内元素</strong>实际包含两个方面：</p>
<ol>
<li><p>HTML的嵌套规则</p>
<p>一般块级元素可以包含行内元素和其他块级元素，而行内元素内不可嵌套块级元素</p>
</li>
<li><p>用户代理默认<code>display</code>属性值</p>
<p> W3C为元素指定了默认的<code>display</code>值，用户代理（浏览器）根据W3C的标准，实现默认的样式规则。</p>
<p> <strong>W3C标准：</strong><br> <img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-21-083030.jpg" alt=""></p>
<p> <strong>浏览器默认样式</strong></p>
<p> <img src="media/14821269803155.jpg" alt=""></p>
<p> 注： HTML5中已经没有行内元素和块级元素的概念，详细参见<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories" target="_blank" rel="external">Content categories</a>，块级元素大致相当于HTML5中的<strong>Flow Elements</strong>，行内元素相当于<strong>Phrasing Elements</strong></p>
</li>
</ol>
<h3 id="display-总结"><a href="#display-总结" class="headerlink" title="display 总结"></a>display 总结</h3><ul>
<li>元素以什么样的盒子渲染，是通过<strong>display</strong>属性控制，而非标签类型</li>
<li>浏览器默认样式为每个元素设置了<code>display</code>默认值</li>
<li><code>display</code>默认值是<code>inline</code>（比如，某些浏览器不认识HTML5中的标签，这些元素的<code>display</code>属性值就很悲剧都成<code>inline</code>了）</li>
<li>通过<code>display</code>仅仅是改变元素的显示方式，并未改变标签类型</li>
</ul>
<p><code>display</code>还有很多属性值，感兴趣的参看<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="external">MDN display章节</a></p>
<h3 id="block-inline-inline-block-区别"><a href="#block-inline-inline-block-区别" class="headerlink" title="block, inline, inline-block 区别"></a>block, inline, inline-block 区别</h3><p><code>display</code> 明白后，再看下 <code>block</code>, <code>inline</code>, <code>inline-block</code> 各自特点。</p>
<p>我们为 <code>p</code> 标签设置不同的 <code>display</code> 属性：</p>
<p><strong>HTML</strong></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      block, <span class="keyword">inline</span>, <span class="keyword">inline</span>-block举例：接下来是一个p标签：&lt;p&gt;<span class="built_in">display</span>: block&lt;/p&gt;，这是p标签之后的内容。</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      block, <span class="keyword">inline</span>, <span class="keyword">inline</span>-block举例：接下来是一个p标签，<span class="built_in">display</span>设置为<span class="keyword">inline</span>：&lt;p class=<span class="string">"inline"</span>&gt;<span class="built_in">display</span>: <span class="keyword">inline</span>;&lt;/p&gt;，这是p标签之后的内容。</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">      block, <span class="keyword">inline</span>, <span class="keyword">inline</span>-block举例：接下来是一个p标签，<span class="built_in">display</span>设置为<span class="keyword">inline</span>-block：&lt;p class=<span class="string">"inline-block"</span>&gt;<span class="built_in">display</span>: <span class="keyword">inline</span>-block&lt;/p&gt;，这是p标签之后的内容。</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p><strong>CSS</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#77C2D4</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">2em</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">1em</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#F9454E</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.inline</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.inline-block</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>效果图</strong></p>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-18-110247.jpg" alt=""></p>
<p>第一个p标签，默认是<code>block</code>。<code>height</code>，<code>width</code>，<code>margin-top</code>，<code>padding-left</code>均有效，单独占一行，<em>注意它的margin-left/right和width的关系！</em></p>
<p>第二个p标签，<code>dislplay: inline</code>。<code>height</code>，<code>width</code>，<code>margin-top</code>都无效了</p>
<p>第三个p标签，<code>display: inline-block</code>。一切正常，而且不换行</p>
<p><strong>block, inline, inline-block 总结</strong></p>
<p><strong>block</strong></p>
<ul>
<li>（默认）宽度：等于父元素content的宽度</li>
<li>（默认）高度：由子元素高度确定</li>
<li>width、height 可设置</li>
<li>单独占一行</li>
</ul>
<p><strong>inline</strong></p>
<ul>
<li>设置<code>width</code>和<code>height</code>无效</li>
<li><code>margin</code>和<code>padding</code> 垂直方向上设置无效</li>
<li>只要宽度足够，从左往右（对于从左往右阅读的语言）挨个排列</li>
</ul>
<p><strong>inline-block</strong></p>
<p><code>inline-block</code>继承了<code>inline</code>和<code>block</code>的特点，W3chools的总结简直完美：</p>
<blockquote>
<p>An inline-block element is <strong>placed</strong> as an inline element (on the same line as adjacent content), but it <strong>behaves</strong> as a block element.</p>
</blockquote>
<ul>
<li>可设置<code>width</code>和<code>height</code></li>
<li><code>margin</code>和<code>padding</code>垂直方向上有效</li>
<li>不换行</li>
</ul>
<p><a href="http://quirksmode.org/css/css2/display.html" target="_blank" rel="external">The Display Declaration</a>这篇文章有更多的<code>display</code>属性的演示和说明</p>
<h2 id="挑战一下"><a href="#挑战一下" class="headerlink" title="挑战一下"></a>挑战一下</h2><p>搞懂 <code>display</code> 和 <code>block</code>, <code>inline</code>, <code>inline-block</code> 后，很多页面你都可以完成了。实现Google开发者网站我们的截图部分：</p>
<p>建议你拿我们最开始举例的Google开发者网站练手，要求如下：</p>
<ul>
<li>不允许用浮动</li>
<li>你要解决 <code>inline-block</code> 可能出现的<strong>空白</strong>问题</li>
</ul>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-14-Google%20Developers%E5%89%AF%E6%9C%AC.png" alt="CSS 盒模型 任务"></p>
<p>我这不直接贴代码了，如果实现有问题或者需要参考的，直接联系我就好了</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CSS假定每个元素都会生成一个或者多个矩形框，这称为元素框（规范的将来版本可能允许非矩形框，不过对现在来说，框都是矩形的）。各元素框中心有一个内容区（content area）。这个内容区周围有可选的内边框、边框和外边框。——《CSS权威指南》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;任何一个页面，都是由一个一个的盒子构成；而每个元素，其实都是一个矩形盒子，也就是所谓的盒模型；所以，写一个页面，无非就是把这些盒子按照一定方式进行排列，是不很简单——凡是都是盒子&lt;/p&gt;
&lt;p&gt;以Google的开发者网站来展示：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://oe54phg1r.bkt.clouddn.com/blog/2016-12-14-Google%20Developers%E5%89%AF%E6%9C%AC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;先拆分成两个大盒子（红色虚线标准），然后在每个大盒子中又包括很多小盒子（你看，文字也是由矩形框包围起来的），把这些盒子进行布局排版，再加上视觉效果，这个页面就可以写出来了。&lt;/p&gt;
&lt;h2 id=&quot;盒模型基本结构&quot;&gt;&lt;a href=&quot;#盒模型基本结构&quot; class=&quot;headerlink&quot; title=&quot;盒模型基本结构&quot;&gt;&lt;/a&gt;盒模型基本结构&lt;/h2&gt;&lt;p&gt;扯了这么多，具体看看一个盒子是怎么样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ogv9dph1e.bkt.clouddn.com/box-model.svg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个盒子，从内到外，分别是&lt;code&gt;content(内容区域)&lt;/code&gt;、&lt;code&gt;padding内边距&lt;/code&gt;、&lt;code&gt;border(边框)&lt;/code&gt;、&lt;code&gt;margin(外边距)&lt;/code&gt;；&lt;/p&gt;
    
    </summary>
    
      <category term="css-tutorial" scheme="http://www.voyax.me/categories/css-tutorial/"/>
    
    
      <category term="CSS" scheme="http://www.voyax.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS第三课 栅格系统</title>
    <link href="http://www.voyax.me/posts/9e545f56/"/>
    <id>http://www.voyax.me/posts/9e545f56/</id>
    <published>2017-07-26T07:30:57.000Z</published>
    <updated>2017-07-26T07:56:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一节内容我自己都觉得比较鸡肋，就当捧个场$_$，感兴趣的完全可以自行参考 <a href="https://getuikit.com/" target="_blank" rel="external">uikit</a> 和 <a href="http://getbootstrap.com/" target="_blank" rel="external">bootstrap</a> 的实现，以及二者的差异。</p>
<p><strong>实现自己的栅格系统，实现响应式布局</strong></p>
<p>利用栅格系统，完成设计稿的第二块区域。学有余力的同学，可以尝试再用<code>inline-block</code>实现。</p>
<p><img src="http://ogv9dph1e.bkt.clouddn.com/14745300279618.jpg" alt="section two"></p>
<a id="more"></a>
<h2 id="编写HTML"><a href="#编写HTML" class="headerlink" title="编写HTML"></a>编写HTML</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"container text-center"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span> = <span class="string">"section__header"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>WHY USE OUR PLATFORM<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span> = <span class="string">"list-nostyle row"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span> = <span class="string">"media--left col-md-4"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"media__body"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span> = <span class="string">"media__heading"</span>&gt;</span>……<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>……<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      ……</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://ogv9dph1e.bkt.clouddn.com/14745348853880.jpg" alt=""></p>
<p><strong>栅格系统</strong></p>
<p>栅格系统的作用在于：</p>
<ul>
<li>快速布局</li>
<li>可重用</li>
<li>响应式设计</li>
</ul>
<p>如果用过Bootstrap，你就知道，Bootstrap采用了12列的栅格。其实你完全可以自由设计栅格的列数，12、16、24等等都是可以。</p>
<p>但是，你可能需要关注，960这个数字，很多网站默认的宽度都是960px：</p>
<p><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f89py6ttdyj30az07cmxe.jpg" alt="website use 960px"></p>
<p>之所以选择960是因为绝大多数显示器都是1024宽，那为了避免出现水平方向的滚动条，那就会采用一个比1024窄一点的宽度，而960正可以被很多数整除：</p>
<p><code>1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 16, 20, 24, 30, 32, 40, 48, 60, 64, 80, 96, 120, 160, 192, 240, 320, 480, 960</code></p>
<p>对于布局来说，你可以选择更多的比例。</p>
<p>如果我们选择1000，相对就不是那么方便了：</p>
<p><code>1, 2,  4,  5,  8,  10,  20,  25,  40,  50,  100,  125,  200,  250,  500, 1000</code></p>
<p>现在我们来写一个栅格系统：</p>
<h3 id="栅格系统的基本结构"><a href="#栅格系统的基本结构" class="headerlink" title="栅格系统的基本结构"></a>栅格系统的基本结构</h3><p>在进行排版时，需要对水平轴划分，将相应的内容放到之前规划的位置。这就是我们看到的<code>row（行）</code>和<code>column（列）</code>，<code>column</code>作为<code>row</code>的子元素；</p>
<p>html结构：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span> = <span class="string">"row"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span> = <span class="string">"col-x"</span>&gt;</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<p>有的栅格系统还会用一个<code>container</code>将<code>row</code>包裹起来，这不是必须的，如果你没有特殊的需求，放心大胆的直接用<code>row</code>和<code>column</code>。在<code>bootstrap</code>中，<code>row</code>需要被<code>container</code>包裹，看下源码，想想为什么Bootstrap这么设计：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: auto;</div><div class="line">  <span class="attribute">margin-left</span>: auto;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">750px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) &#123;</div><div class="line">  <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</div><div class="line">  <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">1170px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.row</span> &#123;</div><div class="line">  <span class="attribute">margin-right</span>: -<span class="number">15px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">15px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义列Column"><a href="#定义列Column" class="headerlink" title="定义列Column"></a>定义列Column</h3><p>我们这里采用12列的栅格系统，行用<code>.row</code>来控制，列<code>column</code>我们参考Bootstrap的命名，<code>col-md-x</code>。</p>
<p>其中，<code>x</code>代表<code>1~12</code>的数字，<code>xs,sm,md,lg</code>匹配不同屏幕大小：</p>
<p><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f8dp8qu3klj312m0lw42e.jpg" alt="栅格类"></p>
<p>采用<code>float</code>：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[class ^= "col-"]</span>&#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">list-style</span>: none; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.col-md-12</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-11</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-10</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-9</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-8</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-7</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-6</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-5</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-4</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-3</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-2</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.col-md-1</span>&#123;</div><div class="line">  <span class="attribute">width</span>: .<span class="number">083333333%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对所有的<code>col</code>都添加了<code>list-style: none</code>，兼容<code>&lt;li&gt;</code>的情况。</p>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>这次我们采用<code>clearfix</code>实现：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:before</span>,</div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="完善栅格"><a href="#完善栅格" class="headerlink" title="完善栅格"></a>完善栅格</h3><p>现在你已经可以使用栅格系统完成布局了：<br><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f8dr7lgxgaj31kw0qi428.jpg" alt=""></p>
<p>但是还有两点需要处理：</p>
<ol>
<li>在栅格之间增加间隔：我们很多时候都需要栅格之间要有一定间隔，而不是两个紧挨着。</li>
<li>移动适配：我们的布局应该能适应不同屏幕的大小</li>
</ol>
<p><strong>增加间隔</strong></p>
<p>并不是所有的栅格之间都需要间隔，所以没有间隔的栅格也是需要保留的。那就新增一个类来控制有间隔的栅格：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.row-divider</span> &gt; *&#123;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">1.6%</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">1.6%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了避免重新计算宽度所占的百分比，这里我们使用了<code>padding</code>。</p>
<p><strong>移动适配</strong></p>
<p>可以采用两种实现方案，一种是根据屏幕大小来调整<code>col-</code>的宽度，另外一种是根据屏幕大小应用不同的<code>class</code>。两种方法其实都很简单，直接上代码：</p>
<p><strong>1. 调整<code>col-</code>宽度</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.col-6</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> all and (max-width: <span class="number">750px</span>)&#123;</div><div class="line">  <span class="selector-tag">width</span>: 100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是给出了最简单的演示，很多时候，我们需要设置多个阈值，并且还要考虑最后一个元素是否会溢出的问题，这些需要提前计算好。</p>
<p><strong>2. 应用不同的<code>class</code></strong></p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="xml">/* 小屏幕（平板，大于等于 768px） */</span></div><div class="line">@media (min-width: @screen-sm-min) <span class="template-variable">&#123; ... &#125;</span><span class="xml"></span></div><div class="line"></div><div class="line">/* 中等屏幕（桌面显示器，大于等于 992px） */</div><div class="line">@media (min-width: @screen-md-min) <span class="template-variable">&#123; ... &#125;</span><span class="xml"></span></div><div class="line"></div><div class="line">/* 大屏幕（大桌面显示器，大于等于 1200px） */</div><div class="line">@media (min-width: @screen-lg-min) <span class="template-variable">&#123; ... &#125;</span><span class="xml"></span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-4"</span>&gt;</span>.col-xs-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-4"</span>&gt;</span>.col-xs-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-4"</span>&gt;</span>.col-xs-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里直接粘贴了Bootstrap的代码，很简单是吧，相比第一个解决方案，这样更好控制。</p>
<h3 id="完成剩下的工作"><a href="#完成剩下的工作" class="headerlink" title="完成剩下的工作"></a>完成剩下的工作</h3><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f8dzz1bkh7j31kw0iawhq.jpg" alt=""></p>
<p>这是我们最后的效果，尝试下自己完成：</p>
<ol>
<li>图片、文字左右布局</li>
<li>图片和文字垂直居中</li>
<li>当文字过多时，用<code>...</code>表示</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一节内容我自己都觉得比较鸡肋，就当捧个场$_$，感兴趣的完全可以自行参考 &lt;a href=&quot;https://getuikit.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;uikit&lt;/a&gt; 和 &lt;a href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bootstrap&lt;/a&gt; 的实现，以及二者的差异。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现自己的栅格系统，实现响应式布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;利用栅格系统，完成设计稿的第二块区域。学有余力的同学，可以尝试再用&lt;code&gt;inline-block&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ogv9dph1e.bkt.clouddn.com/14745300279618.jpg&quot; alt=&quot;section two&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;编写HTML&quot;&gt;&lt;a href=&quot;#编写HTML&quot; class=&quot;headerlink&quot; title=&quot;编写HTML&quot;&gt;&lt;/a&gt;编写HTML&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;container text-center&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;section__header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;WHY USE OUR PLATFORM&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;list-nostyle row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;media--left col-md-4&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;media__body&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;media__heading&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;……&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;……&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ……&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://ogv9dph1e.bkt.clouddn.com/14745348853880.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栅格系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;栅格系统的作用在于：&lt;/p&gt;
    
    </summary>
    
      <category term="css-tutorial" scheme="http://www.voyax.me/categories/css-tutorial/"/>
    
    
      <category term="CSS" scheme="http://www.voyax.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS第二课 优雅</title>
    <link href="http://www.voyax.me/posts/3bcac801/"/>
    <id>http://www.voyax.me/posts/3bcac801/</id>
    <published>2017-07-26T07:30:07.000Z</published>
    <updated>2017-07-26T07:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>设定一个通用的排版样式</li>
<li>完成第一个模块</li>
</ol>
<p><img src="http://ogv9dph1e.bkt.clouddn.com/14743365901698.jpg" alt=""></p>
<a id="more"></a>
<p>上一课为了通过一个导航栏，尽可能多得给大家看到CSS中一些需要注意的问题；没有讲解在项目中如何从头开始组织自己的代码，这节课我们把这部分内容补上，然后完成第一个模块。</p>
<h3 id="初始化你的CSS"><a href="#初始化你的CSS" class="headerlink" title="初始化你的CSS"></a>初始化你的CSS</h3><p>虽然加载了<code>normalize.css</code>，但是我们还是要手动处理一些问题：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* init css</div><div class="line">* 1. change to border-box</div><div class="line">* 2. avoid horizontal width overflow</div><div class="line">* 3. define base font</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line"></div><div class="line">  <span class="attribute">font-family</span>:  <span class="string">"Helvetica Neue"</span>,Helvetica, Arial, <span class="string">"HanHei SC"</span>, <span class="string">"PingFang SC"</span>, SimSun,<span class="string">"Source Han Sans CN"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"WenQuanYi Microhei"</span>,sans-serif;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</div><div class="line">  </div><div class="line">  <span class="attribute">color</span>: <span class="number">#9cafc3</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</div><div class="line"></div><div class="line">  <span class="attribute">overflow-x</span>: hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p><strong><code>box-sizing</code></strong>在上一课我们已经讲过，<code>box-sizing</code>默认是<code>content-box</code>，现在改成更方便的<code>border-box</code>。想一想下边这两种写法有和差异：</p>
<p> 写法1：</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;  </div><div class="line">&#125;</div><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>写法2

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>保持页面宽度不会溢出</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">overflow-x</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>这里有一个小点，有时候你还会看到很多混乱的`height`

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>


或者

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line"> <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">min-heigth</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>


或者

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>


等等之类的排列组合，你只要理解`height`的默认值是`auto`，像设置`min-height`或者`max-height`之类的，反正又不是设置了`height`，超出了控制范围，`height`该怎么样还是怎样。
</code></pre><p>要是没明白，看下<a href="https://codepen.io/absolutholz/post/html-and-body-element-height-100" target="_blank" rel="external">这篇文章</a></p>
<iframe height="265" scrolling="no" src="//codepen.io/absolutholz/embed/preview/XJJpPX/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/absolutholz/pen/XJJpPX/" target="_blank" rel="external">HTML &amp; Body Height tests</a> by absolutholz (<a href="http://codepen.io/absolutholz" target="_blank" rel="external">@absolutholz</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<ol>
<li>设置字体<br> 关于字体的选择，请参看<a href="http://www.4guangnian.com/front-end/css/%E4%B8%AD%E6%96%87web%E6%8E%92%E7%89%88%E5%8F%82%E8%80%83.html" target="_blank" rel="external">Web中文字体排版指南</a></li>
</ol>
<h3 id="确定基本的排版"><a href="#确定基本的排版" class="headerlink" title="确定基本的排版"></a>确定基本的排版</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;</div><div class="line">  <span class="attribute">margin-top</span>: .<span class="number">7em</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: .<span class="number">2em</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.1em</span>;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">2.25em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h2</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h3</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.7em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h4</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.8em</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.8em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">color</span>: inherit;</div><div class="line">  <span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">img</span>, <span class="selector-tag">video</span>&#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们设定了标题、段落的字体大小、行间距、margin；去掉了<code>&lt;a&gt;</code>标签的的下划线；同时，给<code>&lt;img&gt;</code>,<code>&lt;video&gt;</code>这样的替换元素设置最大宽度。</p>
<h3 id="完成导航"><a href="#完成导航" class="headerlink" title="完成导航"></a>完成导航</h3><p>先调整下头部的<code>HTML</code>结构，为了保证在宽屏上的效果，我们添加一个容器来包裹页面内容，设置<code>max-width</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">"site__header"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar__brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Company Logo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar__nav list-nostyle"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>PlatForm<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  &lt;<span class="regexp">/header&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* container</span></div><div class="line">  ========================================================================== */</div><div class="line"></div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用<code>margin:0 auto</code>进行水平居中。其背后的原理在于：一个块元素的宽度默认会充满父元素的content-width，设定了width后，如果<code>margin-left/right</code>为<code>auto</code>，那么左右<code>margin</code>会平分剩余空间。</p>
<p>设置左右<code>padding</code>是为了防止内容部分直接贴到<code>container</code>，当宽度小于960px，你肯定不会希望内容紧贴着屏幕边缘的。</p>
<p>现在你的页面应该长这样：<br><img src="http://ogv9dph1e.bkt.clouddn.com/14743590342670.jpg" alt="导航"></p>
<p>现在请自己修改导航的样式，并激活其中一个导航链接（添加一个<code>active</code>类），最后的结果应该这样：</p>
<p><img src="http://ogv9dph1e.bkt.clouddn.com/14743596465148.jpg" alt=""></p>
<h3 id="第一个模块"><a href="#第一个模块" class="headerlink" title="第一个模块"></a>第一个模块</h3><p><code>html</code>结构如下：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container text-center"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span> = <span class="string">"section__header"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span> = <span class="string">"section__title"</span>&gt;</span>BEST HEADLINE IN THE WORLD<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">"section--center__desc"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum rutrum urna felis, dictum dictum erat condimentum</div><div class="line">        sit amet. Cras vel est bibendum, Cras vel est bibendum, posuere orci quis, consequat nisl.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>CTA BUTTON<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section--center__img--bottom"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/rectangle1.svg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span> <span class="comment">&lt;!-- section one --&gt;</span></div></pre></td></tr></table></figure>
<p> 现在来修改css：</p>
<p> <strong>内容水平居中</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/* text-center</span></div><div class="line">  ========================================================================== */</div><div class="line"></div><div class="line"><span class="selector-class">.text-center</span>&#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们用了<code>text-align: center</code>进行水平居中，<code>text-align</code>实际是让行内元素进行居中。</p>
<p><strong>将<code>section__header</code>往下挪一点</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.section__header</span>&#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">78px</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">49px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.section__title</span>&#123;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">28px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用<code>margin-top</code>来调整下元素的位置。</p>
<p><strong>控制下文字宽度</strong><br><img src="http://ogv9dph1e.bkt.clouddn.com/14743619207301.jpg" alt=""><br>参看设计稿，打开栅格，你会发现文字描述部分的宽度占用了8/12：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.section--center__desc</span>&#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">66.667%</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们来写<strong>按钮</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* button</span></div><div class="line">  ========================================================================== */</div><div class="line"></div><div class="line"><span class="selector-class">.btn</span>&#123;</div><div class="line">  <span class="attribute">padding</span>: .<span class="number">3em</span> .<span class="number">8em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#9CAFC3</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#9CAFC3</span>;</div><div class="line">  <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">125%</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span>&#123;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</div><div class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们采用相对单位<code>em</code>根据字体大小来控制自动改变按钮大小。</p>
<p><strong>底部图片</strong></p>
<p>现在底部图片已经居中，调整下间距：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.section--center__img--bottom</span>&#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">62px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看看最终的效果如何：<br><img src="http://ogv9dph1e.bkt.clouddn.com/14745289898347.jpg" alt="section one"></p>
<p>很简单不是吗；下一课我们将会讲解“响应式栅格系统”</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;设定一个通用的排版样式&lt;/li&gt;
&lt;li&gt;完成第一个模块&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://ogv9dph1e.bkt.clouddn.com/14743365901698.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;上一课为了通过一个导航栏，尽可能多得给大家看到CSS中一些需要注意的问题；没有讲解在项目中如何从头开始组织自己的代码，这节课我们把这部分内容补上，然后完成第一个模块。&lt;/p&gt;
&lt;h3 id=&quot;初始化你的CSS&quot;&gt;&lt;a href=&quot;#初始化你的CSS&quot; class=&quot;headerlink&quot; title=&quot;初始化你的CSS&quot;&gt;&lt;/a&gt;初始化你的CSS&lt;/h3&gt;&lt;p&gt;虽然加载了&lt;code&gt;normalize.css&lt;/code&gt;，但是我们还是要手动处理一些问题：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* init css&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* 1. change to border-box&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* 2. avoid horizontal width overflow&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;* 3. define base font&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;:  &lt;span class=&quot;string&quot;&gt;&quot;Helvetica Neue&quot;&lt;/span&gt;,Helvetica, Arial, &lt;span class=&quot;string&quot;&gt;&quot;HanHei SC&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;PingFang SC&quot;&lt;/span&gt;, SimSun,&lt;span class=&quot;string&quot;&gt;&quot;Source Han Sans CN&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Microsoft YaHei&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;WenQuanYi Microhei&quot;&lt;/span&gt;,sans-serif;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#9cafc3&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;max-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow-x&lt;/span&gt;: hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*, *&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt;, *&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: inherit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/strong&gt;在上一课我们已经讲过，&lt;code&gt;box-sizing&lt;/code&gt;默认是&lt;code&gt;content-box&lt;/code&gt;，现在改成更方便的&lt;code&gt;border-box&lt;/code&gt;。想一想下边这两种写法有和差异：&lt;/p&gt;
&lt;p&gt; 写法1：&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*, *&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt;, *&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: inherit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;写法2

&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;*&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;: border-box;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;保持页面宽度不会溢出&lt;/p&gt;
 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;max-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow-x&lt;/span&gt;: hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="css-tutorial" scheme="http://www.voyax.me/categories/css-tutorial/"/>
    
    
      <category term="CSS" scheme="http://www.voyax.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS第一课 你热了么</title>
    <link href="http://www.voyax.me/posts/44828b7f/"/>
    <id>http://www.voyax.me/posts/44828b7f/</id>
    <published>2017-07-26T07:28:52.000Z</published>
    <updated>2017-07-26T07:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照Sketch设计稿，实现一个完整的页面：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2968570-be5bd3eb87eb8e96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>希望你学完这一些列课程后，能够系统地掌握CSS，真正把CSS玩转</p>
<a id="more"></a>
<h2 id="Let’s-Go-Go-Go"><a href="#Let’s-Go-Go-Go" class="headerlink" title="Let’s Go Go Go"></a>Let’s Go Go Go</h2><p>首先下载素材文件（<a href="https://pan.baidu.com/s/1o8MvRF8" target="_blank" rel="external">Windows用户可以下载pdf版</a>）</p>
<p><a href="https://pan.baidu.com/s/1i4Gknu1" target="_blank" rel="external">设计稿</a></p>
<p>用Sketch打开文件后（可能会出现找不到字体的问题，<a href="https://pan.baidu.com/s/1kVS7CMj" target="_blank" rel="external">字体下载</a>），你可以通过<code>commad</code> + <code>1</code> 将Artboard缩放至视口大小。</p>
<p>按住<code>control</code> + <code>L</code>可以显示出栅格系统，栅格系统可以帮你快速排版。</p>
<blockquote>
<p>如果你不熟悉sketch，想了解更多，同时不占用你写代码的时间，可以看看<a href="http://webdesign.tutsplus.com/tutorials/sketch-for-beginners-design-a-login-form-interface--cms-21534" target="_blank" rel="external">这篇用Sketch制作登录页面的教程</a>。</p>
</blockquote>
<p>我们之后会单独推送一期sketch的教程，现在还是主要关注代码。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>新建一个html文件和css文件<br>├── css<br>│   └── style.css<br>└── index.html</p>
<h3 id="页面模版"><a href="#页面模版" class="headerlink" title="页面模版"></a>页面模版</h3><p>还记得在HTML的课程中，为了保持代码的一致性并节省时间，保存的html模板么</p>
<p>大多数编辑器都允许你按照自己的风格定制模板</p>
<p>如果你用的atom，参考<a href="http://www.voyax.me/2016/08/12/atom代码补全snippets配置/">atom代码补全snippets配置</a>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Lesson 1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-siteapp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/normalize.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="利用browser-sync实时刷新页面"><a href="#利用browser-sync实时刷新页面" class="headerlink" title="利用browser-sync实时刷新页面"></a>利用browser-sync实时刷新页面</h3><p>为了省去每次修改代码后都要手动刷新页面，我习惯使用<code>browser-sync</code>监听文件，自动刷新浏览器</p>
<ol>
<li>安装Browsersync<br> <code>npm install -g browser-sync</code></li>
<li>运行Browsersync<br> <code>browser-sync start --server --files index.html --files &quot;css/*.css&quot;</code></li>
</ol>
<h3 id="引入normalize-css"><a href="#引入normalize-css" class="headerlink" title="引入normalize.css"></a>引入normalize.css</h3><p><a href="http://necolas.github.io/normalize.css/" target="_blank" rel="external">Normalize.css</a>，保证默认元素在不同浏览器上变现一致。</p>
<blockquote>
<p>Normalize.css 只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。——<a href="http://jerryzou.com/posts/aboutNormalizeCss/" target="_blank" rel="external">来，让我们谈一谈 Normalize.css</a></p>
</blockquote>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f8ipxsh4hcj20ku0alt8z.jpg" alt=""></p>
<h2 id="导航页面"><a href="#导航页面" class="headerlink" title="导航页面"></a>导航页面</h2><p>根据设计稿，我们把整个页面分为三个部分，头部、内容区域、页脚</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;header <span class="class"><span class="keyword">class</span> </span>= <span class="string">"site__header"</span>&gt;      </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></div><div class="line">&lt;main <span class="class"><span class="keyword">class</span> </span>= <span class="string">"site__main"</span>&gt;      </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></div><div class="line">&lt;footer <span class="class"><span class="keyword">class</span> </span>= <span class="string">"site__footer"</span>&gt;</div><div class="line"> <span class="xml"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>用BEM作为CSS的命名规范，虽然<code>site__header</code>丑了点，但是在你代码越来越多的时候，这个东西可以让你的代码没那么混乱</p>
<h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h3><p><strong>BEM</strong> 其实很简单，有点面向对象编程的意思，不过比OOP还简单直接。只要记住，BEM是由<strong>Block(块)</strong>，<strong>Element(元素)</strong>，<strong>Modifier(修饰符)</strong>组成，<code>__</code>连接Element，<code>--</code>连接Modifier；你把代码按照模块来组织。举个例子：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.person</span>&#123;&#125;</div><div class="line"><span class="selector-class">.person__avatar</span>&#123;&#125;</div><div class="line"><span class="selector-class">.person__avatar--round</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>我们有一个<code>person</code>的<code>Block</code>，每个人都有头像、名字、描述之类的，所以我们用到<code>.person__element</code>；头像我们可能需要方的、圆的……都需要对这些进行单独设置，所以这时候对每个元素就用到<code>Modifier</code>。代码非常扁平是不是，如果按照我们以前的写法，可能就是这样：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.person</span>&#123;&#125;</div><div class="line"><span class="selector-class">.person</span> <span class="selector-class">.avatar</span>&#123;&#125;</div><div class="line"><span class="selector-class">.round</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>好像除了长一点，没什么区别呀！<br>那现在加一个动物，加个狗吧：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.dog</span>&#123;&#125;</div><div class="line"><span class="selector-class">.dog</span> <span class="selector-class">.avatar</span>&#123;&#125;</div><div class="line"><span class="selector-class">.round</span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>现在有个人养了一条狗，我们的<code>HTML</code>是这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>  = <span class="string">"person"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"avatar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 人头 --&gt;</span></div><div class="line">        …</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- dog --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"dog"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"avatar round"</span>&gt;</span> <span class="comment">&lt;!-- 狗脑 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>有没有晕乎乎的感觉，这两个avatar是一样的还是不一样的，到底应用了哪条样式，还有没有公共的样式+_+？（模块这个东西看起来很悬，不同人理解可能也有偏差，但是你只要用着舒服就行了，写多了，你就知道到底怎么按模块化来写代码了）</p>
<h3 id="完成导航"><a href="#完成导航" class="headerlink" title="完成导航"></a>完成导航</h3><p><code>HTML</code>结构</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">"site__header"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar__brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Company Logo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar__nav list-nostyle"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Platform<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Sign Up<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">  &lt;<span class="regexp">/header&gt;</span></div></pre></td></tr></table></figure>
<p>运行<br><code>browser-sync start --server --files &#39;index.html&#39; --files &quot;css/*.css&quot;</code></p>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-10-06-14741682276835.jpg" alt=""></p>
<p>好了，改点样式让它看来好看点</p>
<ol>
<li>给导航设置一个固定高度</li>
<li>去掉<code>li</code>默认的样式</li>
<li>左右布局</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* list with no style</span></div><div class="line">  ========================================================================== */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 1. remove the margin and padding</div><div class="line">* 2. remove list style</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="selector-class">.list-nostyle</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.list-nostyle</span> <span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* site header</span></div><div class="line">  ========================================================================== */</div><div class="line"></div><div class="line"><span class="selector-class">.site__header</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.navbar</span>&#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.navbar__brand</span>&#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.navbar__nav</span>&#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.navbar__nav</span> <span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们为页眉设置了一个<code>70px</code>的高度</p>
<p>通过浮动来实现Logo左对齐，导航右对齐</p>
<p>因为<code>&lt;li&gt;</code>是<strong>块级元素</strong>，所以会产生换行，我们把<code>li</code>设置成<code>inline-block</code>，在同一行显示</p>
<p><code>&lt;a&gt;</code>标签我们一般更习惯不要下划线，而是通过颜色来突出是链接，所以我们把<code>&lt;a&gt;</code>标签的下划线统一去掉：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你看到的应该是这样：</p>
<p><img src="http://ww1.sinaimg.cn/large/006y8lVagw1f8isxqm5b2j31kw0clgmd.jpg" alt=""></p>
<p><strong>inline-block空格的问题</strong></p>
<p>现在回去看看，有个问题需要处理一下：</p>
<p><code>PlatForm</code>，<code>About</code>，<code>Sign Up</code>之间为什么会有间隙？**</p>
<p>使用了<code>inline-block</code>，<code>inline-block</code>会表现得像文字排版一样，<code>&lt;li&gt;</code>和<code>&lt;li&gt;</code>之间存在空白符，所以最后产生了一个空格</p>
<p>有各种奇奇怪怪的方法可以解决这个问题，这里我只给出我平常用得最多的两个方法：</p>
<ul>
<li><p>设置font-size: 0;（如果浏览器设置了最小字体大小要跪。。。）</p>
  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1rem</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>去掉标签之间的空白符</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>…<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>喜欢哪个方法就用哪个，快自己把这个bug修复了</p>
<p><strong>美化导航样式</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.navbar__brand</span>, <span class="selector-class">.navbar__nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  </div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">24px</span> <span class="number">8px</span> <span class="number">24px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">  </div><div class="line">  <span class="attribute">line-height</span>: <span class="number">22px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里加了边框方便调试：</p>
<ul>
<li><p>为了能够设置在垂直方向上的高度(<code>padding-top/bottom, margin-top/bottom, height</code>)：我们设置行内元素<code>&lt;a&gt;</code> <code>display</code>为<code>inline-block</code></p>
<p>  行内元素是就像水一样，垂直方向上设置高度都没用，所以有时候需要设置为<code>inline-block</code>或<code>block</code>。<br>  有个形象的比喻，<code>inline</code>=&gt;水，<code>inline-block</code>=&gt;果冻，<code>block</code>=&gt;石头</p>
</li>
<li><p>设置<code>box-sizing</code>为<code>border-box</code></p>
<p>  默认情况下，元素的height只包括内容区域。但是我们经常需要加入border或者padding，元素的高度的实际高度是<code>padding + border + height</code>，每次你都需要减去<code>padding</code>和<code>border</code>。除了计算麻烦之外，用<strong>百分比</strong>设置高度的时候，你经常会遇到<strong>内容区域溢出</strong>的问题：</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.container</span>&#123;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    Hello World</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  <img src="![](http://oe54phg1r.bkt.clouddn.com/blog/2016-10-06-14741908482970.jpg" alt=""></p>
</li>
<li><p>通过<code>line-height</code>进行垂直居中：<br>  css中水平居中很简单，但是垂直居中就不好做了。通过设置line-height等于<code>height</code>可以让文字垂直居中。关于居中的问题，参考<a href="http://www.voyax.me/2016/04/19/译-CSS居中完全指南/">[译]CSS居中完全指南</a>：<a href="http://www.voyax.me/2016/04/19/译-CSS居中完全指南/">http://www.voyax.me/2016/04/19/译-CSS居中完全指南/</a></p>
<p>  最后还有一个大坑！！！</p>
</li>
</ul>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-10-06-14741913817064.jpg" alt=""></p>
<p>为啥navbar高度没有撑开！！！好吧，都是<code>float</code>的错，<code>float</code>导致元素溢出了文档流，从而父元素的高度不会随着<code>float</code>元素高度的变化而适应。<br>单从float的角度说，有两个思路：</p>
<ol>
<li>将父元素变成<a href="http://www.voyax.me/2016/04/11/谈谈BFC/">BFC</a></li>
<li>清除浮动</li>
</ol>
<p>代码如下：</p>
<p>通过<code>overflow</code>触发<code>BFC</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.navbar</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>clearfix</code>（关于clearfix的讨论，看看stackoverflow上的<a href="http://stackoverflow.com/questions/8554043/what-is-a-clearfix" target="_blank" rel="external">这个讨论</a>）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">   <span class="attribute">content</span>: <span class="string">" "</span>; <span class="comment">/* Older browser do not support empty content */</span></div><div class="line">   <span class="attribute">visibility</span>: hidden;</div><div class="line">   <span class="attribute">display</span>: block;</div><div class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">   <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一章主要带着你踩踩坑，介绍了几个开发中经常遇到的问题。下一张我们看看在实际开发中，如果从零开始组织你的代码，同时逐步完成这个页面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照Sketch设计稿，实现一个完整的页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2968570-be5bd3eb87eb8e96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;希望你学完这一些列课程后，能够系统地掌握CSS，真正把CSS玩转&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Let’s-Go-Go-Go&quot;&gt;&lt;a href=&quot;#Let’s-Go-Go-Go&quot; class=&quot;headerlink&quot; title=&quot;Let’s Go Go Go&quot;&gt;&lt;/a&gt;Let’s Go Go Go&lt;/h2&gt;&lt;p&gt;首先下载素材文件（&lt;a href=&quot;https://pan.baidu.com/s/1o8MvRF8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows用户可以下载pdf版&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1i4Gknu1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计稿&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用Sketch打开文件后（可能会出现找不到字体的问题，&lt;a href=&quot;https://pan.baidu.com/s/1kVS7CMj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字体下载&lt;/a&gt;），你可以通过&lt;code&gt;commad&lt;/code&gt; + &lt;code&gt;1&lt;/code&gt; 将Artboard缩放至视口大小。&lt;/p&gt;
&lt;p&gt;按住&lt;code&gt;control&lt;/code&gt; + &lt;code&gt;L&lt;/code&gt;可以显示出栅格系统，栅格系统可以帮你快速排版。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你不熟悉sketch，想了解更多，同时不占用你写代码的时间，可以看看&lt;a href=&quot;http://webdesign.tutsplus.com/tutorials/sketch-for-beginners-design-a-login-form-interface--cms-21534&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇用Sketch制作登录页面的教程&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="css-tutorial" scheme="http://www.voyax.me/categories/css-tutorial/"/>
    
    
      <category term="CSS" scheme="http://www.voyax.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 入门指南</title>
    <link href="http://www.voyax.me/posts/4972c060/"/>
    <id>http://www.voyax.me/posts/4972c060/</id>
    <published>2017-07-26T07:02:10.000Z</published>
    <updated>2017-07-26T07:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS的基本知识很简单，你只要知道有哪些基本样式属性、CSS的选择器，怎么在页面应用CSS，就可以随便倒腾试试手了。</p>
<p>这篇文章属于最最基础的CSS大白教程，只涉及语法；介绍CSS基本语法、常用属性、选择器参考手册，最后会推荐三本分别适合不同阶段的CSS参考书，一本作为新手学习的，一本作为参考手册，还有本属于深入的技巧。</p>
<blockquote>
<p>如果你对HTML还不熟，建议先去W3school补充下<code>HTML</code>的知识，觉得OK了，看看我们的<a href="http://www.4guangnian.com/topic/你不应该的忽视的HTML知识点" target="_blank" rel="external">HTML专题</a>检测下自己的水平。</p>
</blockquote>
<a id="more"></a>
<h2 id="CSS如何改变页面样式"><a href="#CSS如何改变页面样式" class="headerlink" title="CSS如何改变页面样式"></a>CSS如何改变页面样式</h2><p>我们在页面看到的各种排版、颜色、字体等等都是由CSS来控制的，比如现在我想改变所有段落的颜色为蓝色：</p>
<p>原始<code>index.html</code>如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS基础知识-四光年<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>如何学好CSS<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>代码不贪多，理解清楚<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="第一种方法：内部样式表"><a href="#第一种方法：内部样式表" class="headerlink" title="第一种方法：内部样式表"></a>第一种方法：内部样式表</h3><p>在<code>head</code>标中加入<code>style</code>标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS基础知识-四光年<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!--内部样式表--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-tag">p</span>&#123;</div><div class="line">        <span class="attribute">color</span>: blue;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="第二种方法：内联样式"><a href="#第二种方法：内联样式" class="headerlink" title="第二种方法：内联样式"></a>第二种方法：内联样式</h3><p>在标签内部添加<code>style</code>属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: blue;"</span>&gt;</span>代码不贪多，理解清楚<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不过，这仅仅修改了这一段落的颜色哈哈哈，要是还有很多p标签，继续加<code>style</code>属性会不会疯了……</p>
<h3 id="第三种方法：外部样式表"><a href="#第三种方法：外部样式表" class="headerlink" title="第三种方法：外部样式表"></a>第三种方法：外部样式表</h3><p>新建一个CSS文件（后缀<code>.css</code>），然后在HTML中引入这个文件：</p>
<p>比如我在<code>index.html</code>的同级目录创建一个<code>style.css</code></p>
<p><code>style.css</code>文件内容：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在我们的<code>index.html</code>的<code>head</code>中添加<code>link</code>标签，引入<code>style.css</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS基础知识-四光年<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!--外部样式表--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<p>极小概率你会看到<code>@import</code>，它也是引入外部样式表，语法不同，不过并不推荐。</p>
<p>关于<code>link</code>和<code>import</code>的详细讨论，参见<a href="http://stackoverflow.com/questions/1022695/difference-between-import-and-link-in-css?noredirect=1&amp;lq=1" target="_blank" rel="external">Difference between @import and link in CSS</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们大多数时候都是通过外部样式表引入样式，方便代码组织，也不会破坏<code>HTML</code>的整洁。另外两种方法，根据实际情况灵活使用就好了。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>具体看CSS怎么写，有哪些属性：</p>
<p>我们的样式是由一些列CSS规则共同组成，CSS规则由<code>选择器 + 声明</code>构成，用大括号<code>{}</code>来包裹声明语句。</p>
<p>借用w3chool的一张图：</p>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-08-ct_css_selector.gif" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.primary-nav</span>&#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>所有<code>h1</code>元素字体颜色设置为红色，字体大小14px；</p>
</li>
<li><p><code>class</code>为<code>primary-nav</code>的所有元素背景颜色设置为<code>#333</code>。</p>
</li>
</ul>
<blockquote>
<p>CSS的属性有很多，后边实际运用中我们会介绍重要而且容易出错的属性，其他的需要你自己去查看手册<a href="http://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="external">CSS属性参考手册</a>。</p>
<p>CSS的属性除了包括视觉上的样式，还有听觉样式，不过你工作中几乎不会用到，知道还有听觉呈现这个东西就可以了</p>
</blockquote>
<p>CSS的属性，其基础是单位，下面专门把颜色和尺寸讲解清楚，颜色和长度单位的选择对你后边写CSS非常重要，需要额外注意。</p>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-26-070549.jpg" alt=""></p>
<p>在CSS中我们有4种表示颜色的方式：颜色名、16进制、RGB、HSL</p>
<p>比如红色：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">color</span>: red; <span class="comment">/* 颜色名 */</span></div><div class="line"><span class="attribute">color</span>: <span class="number">#ff0000</span>; <span class="comment">/* 16进制 */</span></div><div class="line"><span class="attribute">color</span>: rgb(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">/* rgb */</span></div><div class="line"><span class="attribute">color</span>: hsl(<span class="number">0</span>, <span class="number">100%</span>, <span class="number">50%</span>); <span class="comment">/* hsl */</span></div></pre></td></tr></table></figure>
<h3 id="颜色关键字"><a href="#颜色关键字" class="headerlink" title="颜色关键字"></a>颜色关键字</h3><p>CSS定义了16个基本的颜色关键字：aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, yellow</p>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-26-basic-color-squashed.png" alt=""></p>
<p>比如设置重要警告内容为黄色：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.warning</span>&#123;</div><div class="line">  <span class="attribute">color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用颜色名简单，但是可选颜色太少，书写也不方便，一般只是用来做一些简单的测试。</p>
<h3 id="RGB和RGBA"><a href="#RGB和RGBA" class="headerlink" title="RGB和RGBA"></a>RGB和RGBA</h3><p>rgb分别代表红、绿、蓝，通过组合红绿蓝表示不同的颜色，比如表示红色：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">color</span>: rgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p><code>rgb()</code>接收三个参数，分别表述红、绿、蓝，取值区间[0,255]：</p>
<p>0表示没有这个颜色，所以<code>rgb(0, 0, 0)</code>是黑色</p>
<p>255分别表示纯色的红、绿、蓝，如果三个值都是255，那就是白色了；三个值一样，介于0~255之间，就是不同程度的灰色</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">/* red */</span></div><div class="line">rgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>); <span class="comment">/* green */</span></div><div class="line">rgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>); <span class="comment">/* blue */</span></div><div class="line">rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>); <span class="comment">/* white */</span></div></pre></td></tr></table></figure>
<p><em>rgb()除了接受三个整数外，还可以接收三个百分数</em></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rgb(<span class="number">100</span>%, <span class="number">0</span>%, <span class="number">0</span>%); <span class="comment">/* red */</span></div></pre></td></tr></table></figure>
<p>在工作中，基本都是采用整数的表示方式，百分数表示极少见。</p>
<p><strong>RGBA</strong></p>
<p>RGBA在RGB的基础上增加Alpha通道，设置透明度，Alpha取值区间为[0,1]</p>
<p>0是完全透明，1是完全不透明</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">/* red */</span></div><div class="line">rgba(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.5</span>); <span class="comment">/* 50% opacity red */</span></div></pre></td></tr></table></figure>
<p>这个最常用的用处就是建立一个半透明的背景遮罩</p>
<p>下面的例子我们在一张图片上加上一个灰色半透明的遮罩：</p>
<iframe height="265" scrolling="no" title="MbMLax" src="//codepen.io/voyax/embed/MbMLax/?height=265&theme-id=dark&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/voyax/pen/MbMLax/" target="_blank" rel="external">MbMLax</a> by voya (<a href="http://codepen.io/voyax" target="_blank" rel="external">@voyax</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><p>十六进制是RGB色彩空间的另一种表示，和上边的rgb()可以完全转换，语法如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">RRGGBB</span></div></pre></td></tr></table></figure>
<p>用三个介于00-FF的十六进制数分别表示红、绿、蓝</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#FF0000; <span class="comment">/* red */</span></div><div class="line">#<span class="number">00</span>FF00; <span class="comment">/* green */</span></div><div class="line">#<span class="number">0000</span>FF; <span class="comment">/* blue */</span></div><div class="line">#<span class="number">000000</span>; <span class="comment">/* black */</span></div></pre></td></tr></table></figure>
<p>如果组成的十六进制的3组数各自都是成对的，可以简写为3位，比如<code>#F00</code>等同于<code>FF0000</code></p>
<h3 id="HSL和HSLa"><a href="#HSL和HSLa" class="headerlink" title="HSL和HSLa"></a>HSL和HSLa</h3><p>HSL是不同于RGB的色彩模式，HSL分别表示色调、饱和度、亮度，通过这三个通道来表示不同颜色。</p>
<ul>
<li>H(Hue色调)：表示一个色相环，从0到360度取值，0(或360)是红色，120是绿色，240是蓝色</li>
</ul>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-28-color_wheel_730-1.png" alt=""></p>
<ul>
<li><p>S(Saturation饱和度)：表示颜色的纯度，取值从 0.0% 到 100.0%，数值越大，颜色中的灰色越少，颜色越接近纯色</p>
</li>
<li><p>L(Lightness亮度)：表示颜色的明暗，取值也是 0.0%——100.0%，0%是彻底变暗（黑），100%彻底变亮（白），50%正常亮度</p>
</li>
</ul>
<p>下面的图比较直观（图片来自<a href="https://zh.wikipedia.org/wiki/HSL和HSV色彩空间#/media/File:Hsl-hsv_models.svg" target="_blank" rel="external">维基百科</a>）：</p>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-30-hsl.jpg" alt=""></p>
<p><strong>HSLA</strong>也是在HSL的基础上添加了透明度</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hsl(<span class="number">0</span>,  <span class="number">100</span>%,<span class="number">50</span>%)    <span class="comment">/* red */</span></div><div class="line">hsl(<span class="number">120</span>,<span class="number">100</span>%,<span class="number">50</span>%)    <span class="comment">/* green */</span></div><div class="line">hsl(<span class="number">240</span>,<span class="number">100</span>%,<span class="number">50</span>%)    <span class="comment">/* blue */</span> </div><div class="line">hsla(<span class="number">0</span>,<span class="number">100</span>%,<span class="number">50</span>%,<span class="number">0.05</span>)   <span class="comment">/* 5% opaque red */</span></div></pre></td></tr></table></figure>
<h3 id="颜色表示的选择"><a href="#颜色表示的选择" class="headerlink" title="颜色表示的选择"></a>颜色表示的选择</h3><p>一般我们都使用十六进制的表示法，书写简单而且和其他软件通用，在需要透明颜色的时候用rgba，hsl在设计上对颜色的变化更好控制，但是这个东西对于大多数程序员来说不像rgb那么只管，用得并不多，不过hsl有可能今后会成为主流。</p>
<h2 id="长度-px-em-rem"><a href="#长度-px-em-rem" class="headerlink" title="长度 px, em, rem"></a>长度 px, em, rem</h2><p>这三个都是表示长度的单位，px作为绝对单位（在web页面上），em、rem则是相对单位。</p>
<blockquote>
<p>px本身是一个相对单位，一个像素就是显示器上看到的一个点，每个点的大小，取决于显示器的分辨率；</p>
<p>但是CSS规范做了一个规范：将96ppi作为参考像素，浏览器会根据这个标准进行缩放，保证在所有显示器上显示的长度是确定的</p>
</blockquote>
<h3 id="px"><a href="#px" class="headerlink" title="px"></a>px</h3><p>在网页中，1 px = 1 / 96 in。对于高度、宽度固定的页面，用px非常方便直观，但是考虑到移动端适配，绝对尺寸就很难办。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>浏览器默认会设置一个字体大小：16px；也会限制字体大小的范围：9px ~ 72px。</p>
<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-30-2016-12-29-070140%20-1-.jpg" width="300px"></p>
<p>通过设置根元素(html)字体大小，可以改变浏览器默认字体大小的设置：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 为了方便计算，我们把html字体大小设置为10px */</span></div><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>font-size</code>具有继承性，如果未设置字体大小，元素的<code>font-size</code>将继承父元素<code>font-size</code>大小</p>
</blockquote>
<p>注意下面两个p标签的字体大小：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.title</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">32px</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个常规段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是在h2中的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="em"><a href="#em" class="headerlink" title="em"></a>em</h3><p>em是一个相对长度单位，1em = 使用em单位的元素的字体大小（注意不是参考的它的父元素，而是它自己，很多博客和文档这在有问题）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">button</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">  <span class="attribute">padding</span>: .<span class="number">3em</span> .<span class="number">8em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>padding的实际大小为：</p>
<p>上下padding 16*0.3 = 4.8 = 5px </p>
<p>左右padding 16 * 0.8 = 12.8 = 13px</p>
<blockquote>
<p>对于带小数点的px，现在的浏览器（IE8+、Chrome、Firefox、Safari）都会采用四舍五入的方法取整</p>
</blockquote>
<h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>rem与em相似，仅参考对象不同，rem始终参考根元素的字体大小</p>
<p>看下面的例子 px, rem, rem：</p>
<iframe height="357" scrolling="no" title="aBeaQM" src="//codepen.io/voyax/embed/aBeaQM/?height=357&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/voyax/pen/aBeaQM/" target="_blank" rel="external">aBeaQM</a> by voya (<a href="http://codepen.io/voyax" target="_blank" rel="external">@voyax</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>


<h3 id="px-em-rem的选择"><a href="#px-em-rem的选择" class="headerlink" title="px, em ,rem的选择"></a>px, em ,rem的选择</h3><ul>
<li>完全明确、不需要缩放的布局，才使用px</li>
<li>em慎重考虑，一般只用在组件内部，不然会导致很麻烦的嵌套计算……</li>
<li>优先考虑rem</li>
</ul>
<p>分别看一个可缩放的按钮和响应式页面：</p>
<p><strong>可缩放按钮：在组件内使用em</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">button</span>&#123;</div><div class="line">  <span class="attribute">padding</span>: .<span class="number">3em</span> .<span class="number">8em</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</div><div class="line">  <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在button内使用em来进行缩放，只要改变字体，就能创建不同尺寸的按钮！是不很方便！</p>
<p><strong>响应式设计：rem</strong></p>
<p>rem结合媒体查询，改变根元素字体大小，适应不同的设备。</p>
<iframe height="265" scrolling="no" title="rem responsive" src="//codepen.io/voyax/embed/ZBgqPE/?height=265&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/voyax/pen/ZBgqPE/" target="_blank" rel="external">rem responsive</a> by voya (<a href="http://codepen.io/voyax" target="_blank" rel="external">@voyax</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p>推荐阅读：<a href="https://webdesign.tutsplus.com/zh-hans/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984" target="_blank" rel="external">综合指南: 何时使用Em与Rem</a></p>
<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>选择器用于标识是哪些元素需要被应用样式规则。</p>
<p>最简单直接通过标签名，就只可以选择文档中所有的该标签；也通过为<code>HTML</code>标签定义<code>class</code>或者<code>id</code>属性，使用<strong>类选择器</strong>、<strong>id选择器</strong>；还有什么属性选择器、伪类选择器……</p>
<p>其实道理都一样，反正就是让被选择的元素应用相应的规则，仅仅是写法不同而已。</p>
<p>看几个例子：</p>
<p>标签选择器：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 设置所有p标签字体为16px */</span></div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类选择器：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">  …</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- css --&gt;</span></div><div class="line">/* 设置所有class为info的元素颜色为绿色 */</div><div class="line">.info&#123;</div><div class="line">  color: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类选择器<code>.class-name</code>和后代选择器<code>ancestor-selector descendant-selector</code>会是你工作中用到最多的两个选择器。</p>
<h3 id="CSS选择器参考"><a href="#CSS选择器参考" class="headerlink" title="CSS选择器参考"></a>CSS选择器参考</h3><h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816115396826.jpg" alt=""></p>
<h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816115595941.jpg" alt=""></p>
<h4 id="CSS-2-1-属性选择器"><a href="#CSS-2-1-属性选择器" class="headerlink" title="CSS 2.1 属性选择器"></a>CSS 2.1 属性选择器</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816115811359.jpg" alt=""></p>
<p><em>注：CSS 2.1 属性选择器还有一个特点就是使用多个选择器，同事满足这多个选择器：<code>blockquote[class=quote][cite] { color:#f00; }</code></em></p>
<h4 id="CSS-2-1-中的伪类"><a href="#CSS-2-1-中的伪类" class="headerlink" title="CSS 2.1 中的伪类"></a>CSS 2.1 中的伪类</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816116170153.jpg" alt=""></p>
<h4 id="CSS-2-1-中的伪元素"><a href="#CSS-2-1-中的伪元素" class="headerlink" title="CSS 2.1 中的伪元素"></a>CSS 2.1 中的伪元素</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816116418569.jpg" alt=""></p>
<h4 id="CSS-3-的同级元素通用选择器"><a href="#CSS-3-的同级元素通用选择器" class="headerlink" title="CSS 3 的同级元素通用选择器"></a>CSS 3 的同级元素通用选择器</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816117391650.jpg" alt=""></p>
<h4 id="CSS-3-属性选择器"><a href="#CSS-3-属性选择器" class="headerlink" title="CSS 3 属性选择器"></a>CSS 3 属性选择器</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816117490199.jpg" alt=""></p>
<h4 id="CSS-3-中与用户界面有关的伪类"><a href="#CSS-3-中与用户界面有关的伪类" class="headerlink" title="CSS 3 中与用户界面有关的伪类"></a>CSS 3 中与用户界面有关的伪类</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816117593302.jpg" alt=""></p>
<h4 id="CSS3-中的结构性伪类"><a href="#CSS3-中的结构性伪类" class="headerlink" title="CSS3 中的结构性伪类"></a>CSS3 中的结构性伪类</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816118709857.jpg" alt=""><br><img src="http://ogv9dph1e.bkt.clouddn.com/14816119308154.jpg" alt=""></p>
<h4 id="CSS-3-反选伪类"><a href="#CSS-3-反选伪类" class="headerlink" title="CSS 3 反选伪类"></a>CSS 3 反选伪类</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816119589427.jpg" alt=""></p>
<h4 id="CSS-3-target伪类"><a href="#CSS-3-target伪类" class="headerlink" title="CSS 3 :target伪类"></a>CSS 3 :target伪类</h4><p><img src="http://ogv9dph1e.bkt.clouddn.com/14816119708146.jpg" alt=""></p>
<h2 id="挑战一下"><a href="#挑战一下" class="headerlink" title="挑战一下"></a>挑战一下</h2><p>上边的内容学完后，你觉得可以模仿写一个谷歌商务合作的页面么，不需要考虑什么规范、规则，尽量按照自己想的，看看能做到什么程度。实在写不出来了，再继续学习下一课，这样才会明白下节课的内容到底有什么用。</p>
<p>附上你可能需要的<a href="http://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="external">CSS属性参考手册</a>，<br><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-13-14816310995014.jpg" alt=""></p>
<h2 id="CSS推荐书单"><a href="#CSS推荐书单" class="headerlink" title="CSS推荐书单"></a>CSS推荐书单</h2><ul>
<li><p>入门自学——《精通CSS 高级Web标准解决方案》</p>
<p>  不要看这本书有点老了，但是目前为止，我仍然觉得它是入门的最佳选择，里边的知识点都有结合实际应用，不会枯燥的。<br>  <img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-13-122119.jpg" alt=""></p>
</li>
<li><p>参考手册——《CSS权威指南》</p>
<p>  这本书适合慢慢啃，讲了很多原理、细节，第一遍看可能有很多看不明白或者觉得没用，但是建议你坚持看，到最后你会觉得，原来如此，有道理（很多时候一些疑难杂症的根源都可以从这本书找到）<br>  <img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-13-122911.jpg" alt=""></p>
</li>
<li><p>使用技巧——《CSS 揭秘》</p>
<p>  今年（2016）才出的一本书，广受追捧，里边有很多CSS难点和实用技巧，看完它你CSS提升应该算立竿见影了<br>  <img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-12-13-123009.jpg" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS的基本知识很简单，你只要知道有哪些基本样式属性、CSS的选择器，怎么在页面应用CSS，就可以随便倒腾试试手了。&lt;/p&gt;
&lt;p&gt;这篇文章属于最最基础的CSS大白教程，只涉及语法；介绍CSS基本语法、常用属性、选择器参考手册，最后会推荐三本分别适合不同阶段的CSS参考书，一本作为新手学习的，一本作为参考手册，还有本属于深入的技巧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你对HTML还不熟，建议先去W3school补充下&lt;code&gt;HTML&lt;/code&gt;的知识，觉得OK了，看看我们的&lt;a href=&quot;http://www.4guangnian.com/topic/你不应该的忽视的HTML知识点&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML专题&lt;/a&gt;检测下自己的水平。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;CSS如何改变页面样式&quot;&gt;&lt;a href=&quot;#CSS如何改变页面样式&quot; class=&quot;headerlink&quot; title=&quot;CSS如何改变页面样式&quot;&gt;&lt;/a&gt;CSS如何改变页面样式&lt;/h2&gt;&lt;p&gt;我们在页面看到的各种排版、颜色、字体等等都是由CSS来控制的，比如现在我想改变所有段落的颜色为蓝色：&lt;/p&gt;
&lt;p&gt;原始&lt;code&gt;index.html&lt;/code&gt;如下：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;zh-cmn-Hans&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;CSS基础知识-四光年&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;如何学好CSS&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;代码不贪多，理解清楚&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;第一种方法：内部样式表&quot;&gt;&lt;a href=&quot;#第一种方法：内部样式表&quot; class=&quot;headerlink&quot; title=&quot;第一种方法：内部样式表&quot;&gt;&lt;/a&gt;第一种方法：内部样式表&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;head&lt;/code&gt;标中加入&lt;code&gt;style&lt;/code&gt;标签&lt;/p&gt;
    
    </summary>
    
      <category term="css-tutorial" scheme="http://www.voyax.me/categories/css-tutorial/"/>
    
    
      <category term="CSS" scheme="http://www.voyax.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>全基因组测序是什么东西</title>
    <link href="http://www.voyax.me/posts/61527/"/>
    <id>http://www.voyax.me/posts/61527/</id>
    <published>2017-06-15T10:59:31.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久没更新，在新环境中懒了不少，毕竟和最开始的打算一样，来这调理身体。2017年还剩半年，开始准备准备出国刷题，整理前端、网络的知识了。接下来半个月优化 BWA 或者叫重新一套流程，这个感觉还蛮有意思，顺便了解下生信的东西。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>全基因组测序</strong></p>
<p>正常人有 22 对常染色体 加上 X， Y 这两条性染色体。因为存在碱基互补，只需要知道生物体所携带的一套完整的单倍体序列就可以了。<br>所以<strong>人类全基因组</strong>实际是 22 条常染色体加上 X 或者 X、Y。（总共有 30 亿个碱基）</p>
<p>全基因组测序就是检测出这30亿对碱基对从第1个到第30亿个到底是如何排列的。</p>
<p><strong>“全基因组测序30X” 是什么意思</strong></p>
<p>这是一个数据的要求： 平均把 30 亿个碱基测30次，但因为是随机的，所有的多有的少，这个在他们生物上不叫“多”和“少”，而叫“深”和“浅”。</p>
<p>测序越深，成本自然越高，所以有人做了一个梯度模拟，来计算深度和发现变异的能力的关系，最后的结论是：“平均深度达到 30X 的时候，可以覆盖基因组的 95%”</p>
<p><strong>二代测序和三代测序</strong></p>
<p>目前三代测序还不成熟，主要还是采用二代测序。<br>看了下文章，没看懂ㄟ( ▔, ▔ )ㄏ，我理解的两点区别：</p>
<ol>
<li>二代读长较短，需要后续进行拼接；三代直接对一条 DNA 分子单独测序</li>
<li>二代需要采用 PCR， 三代不需要</li>
</ol>
<blockquote>
<p>其实很好奇，三代不用 PCR 是不就是因为二代把 DNA 打断成很小的片段了，而三代测一条就不要了；请教了一个生信的同学，他说，这是一部分原因，用 PCR 主要是复制很多次，方便检测，不然可能检测不到。蒙圈……</p>
</blockquote>
<h2 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h2><ul>
<li>QC（数据质量控制：测序质量、接头、污染序列）</li>
<li>alignment</li>
<li>variation</li>
<li>calling</li>
<li>annotation</li>
<li>statistic/visualization</li>
</ul>
<p>首先是拿到<strong>基因组测序数据</strong>， 然后 进入 <strong>对比</strong></p>
<p>找<strong>variation</strong> 是很重要的部分，包括 snv, indel, cnv, sv</p>
<p>找到变异基因后，进入临床分析流程：参考一些公共数据库（OMIN, clinVAR, HGMD, GWAS） 和 公司的私有数据，对变异位点进行注释，从而评估个体患疾病的风险，用药建议可以参考 PharmaGKB</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久没更新，在新环境中懒了不少，毕竟和最开始的打算一样，来这调理身体。2017年还剩半年，开始准备准备出国刷题，整理前端、网络的知识了。接下来半个月优化 BWA 或者叫重新一套流程，这个感觉还蛮有意思，顺便了解下生信的东西。&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;全基因组测序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正常人有 22 对常染色体 加上 X， Y 这两条性染色体。因为存在碱基互补，只需要知道生物体所携带的一套完整的单倍体序列就可以了。&lt;br&gt;所以&lt;strong&gt;人类全基因组&lt;/strong&gt;实际是 22 条常染色体加上 X 或者 X、Y。（总共有 30 亿个碱基）&lt;/p&gt;
&lt;p&gt;全基因组测序就是检测出这30亿对碱基对从第1个到第30亿个到底是如何排列的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“全基因组测序30X” 是什么意思&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一个数据的要求： 平均把 30 亿个碱基测30次，但因为是随机的，所有的多有的少，这个在他们生物上不叫“多”和“少”，而叫“深”和“浅”。&lt;/p&gt;
&lt;p&gt;测序越深，成本自然越高，所以有人做了一个梯度模拟，来计算深度和发现变异的能力的关系，最后的结论是：“平均深度达到 30X 的时候，可以覆盖基因组的 95%”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二代测序和三代测序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前三代测序还不成熟，主要还是采用二代测序。&lt;br&gt;看了下文章，没看懂ㄟ( ▔, ▔ )ㄏ，我理解的两点区别：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>突然有一天，发现爷爷、奶奶真的老了</title>
    <link href="http://www.voyax.me/posts/3216/"/>
    <id>http://www.voyax.me/posts/3216/</id>
    <published>2017-04-09T12:39:05.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在外，很容易忘了家的感觉<br>很珍惜这种感觉，健忘和麻木是需要打败的<br>家里边有个活蹦乱跳、童言无忌的二妹，放心了好多<br>很早前，姑姑跟我说，每次接到我电话，爷爷心情就会好很多<br>只是，从小学3年级到现在工作，在家呆的时间越来越短，从一周回家一次，到一个月，再到半年，一年……<br>2017年2月10号，早上5点半从家出发往车站走，我穿了个厚大衣，不记得爷爷穿的什么，很冷<br>爷爷、妈妈还有二妹，打着手电筒，慢慢地离家越来越远<br>想让爷爷回去，年龄大了，天也还冷<br>但是，其实这样陪着可能爷爷会更开心吧</p>
<p>走到火车的桥下边，碰到爸爸骑着摩托车过来接我<br>不知道为什么<br>那个时候才发现爷爷好像真的头发都白完了<br>一直以为自己没长大，爷爷奶奶，爸爸妈妈还是像以前一样<br>但是，好像真的不是的<br>我还有很多时间，但是，什么时候<br>可以，好好陪着他们，他们不再操劳担心</p>
<p>16年过得很失败，创业什么都丢了，连过年回去，什么都没买什么都没带</p>
<p>每一次，回到家，或是接到二妹打来的视频电脑，看见爸妈，看见爷爷奶奶，都会觉得很踏实，不害怕，很有动力</p>
<p>记得，很多时候，你要记得，自己在外边吃好的玩得不亦乐乎，爷爷奶奶爸爸妈妈还有二妹在家还在省吃俭用，七十多岁的两老，还在下地种菜</p>
<p>你要快速成长，时间是个很恐怖的东西</p>
<blockquote>
<p>离开家那天就好想写，但不知道怎么写，今天（2017.04.09）接到二妹电脑，看到爷爷奶奶吃的饭，思绪难断</p>
</blockquote>
<p>2017.04.09于深圳华大公寓7栋609</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在外，很容易忘了家的感觉&lt;br&gt;很珍惜这种感觉，健忘和麻木是需要打败的&lt;br&gt;家里边有个活蹦乱跳、童言无忌的二妹，放心了好多&lt;br&gt;很早前，姑姑跟我说，每次接到我电话，爷爷心情就会好很多&lt;br&gt;只是，从小学3年级到现在工作，在家呆的时间越来越短，从一周回家一次，到一个月，再到半年，一年……&lt;br&gt;2017年2月10号，早上5点半从家出发往车站走，我穿了个厚大衣，不记得爷爷穿的什么，很冷&lt;br&gt;爷爷、妈妈还有二妹，打着手电筒，慢慢地离家越来越远&lt;br&gt;想让爷爷回去，年龄大了，天也还冷&lt;br&gt;但是，其实这样陪着可能爷爷会更开心吧&lt;/p&gt;
&lt;p&gt;走到火车的桥下边，碰到爸爸骑着摩托车过来接我&lt;br&gt;不知道为什么&lt;br&gt;那个时候才发现爷爷好像真的头发都白完了&lt;br&gt;一直以为自己没长大，爷爷奶奶，爸爸妈妈还是像以前一样&lt;br&gt;但是，好像真的不是的&lt;br&gt;我还有很多时间，但是，什么时候&lt;br&gt;可以，好好陪着他们，他们不再操劳担心&lt;/p&gt;
&lt;p&gt;16年过得很失败，创业什么都丢了，连过年回去，什么都没买什么都没带&lt;/p&gt;
&lt;p&gt;每一次，回到家，或是接到二妹打来的视频电脑，看见爸妈，看见爷爷奶奶，都会觉得很踏实，不害怕，很有动力&lt;/p&gt;
&lt;p&gt;记得，很多时候，你要记得，自己在外边吃好的玩得不亦乐乎，爷爷奶奶爸爸妈妈还有二妹在家还在省吃俭用，七十多岁的两老，还在下地种菜&lt;/p&gt;
&lt;p&gt;你要快速成长，时间是个很恐怖的东西&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;离开家那天就好想写，但不知道怎么写，今天（2017.04.09）接到二妹电脑，看到爷爷奶奶吃的饭，思绪难断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2017.04.09于深圳华大公寓7栋609&lt;/p&gt;

    
    </summary>
    
      <category term="365" scheme="http://www.voyax.me/categories/365/"/>
    
    
  </entry>
  
  <entry>
    <title>有些东西梦到了</title>
    <link href="http://www.voyax.me/posts/25763/"/>
    <id>http://www.voyax.me/posts/25763/</id>
    <published>2016-11-29T14:16:33.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>午觉的时候，梦到了苦苦思索的专题方案；可惜，太兴奋就醒了不记得了</p>
<p>人，到底是一个什么样的状态</p>
<p>什么是好，什么是坏；什么是真心，什么是谎言</p>
<p>什么是真实，什么又是镜花水月</p>
<p>而你手中握着的那些东西，又可曾真正珍惜过</p>
<p>岁月绵长，你总会找到自己的归宿</p>
<p>果果，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;午觉的时候，梦到了苦苦思索的专题方案；可惜，太兴奋就醒了不记得了&lt;/p&gt;
&lt;p&gt;人，到底是一个什么样的状态&lt;/p&gt;
&lt;p&gt;什么是好，什么是坏；什么是真心，什么是谎言&lt;/p&gt;
&lt;p&gt;什么是真实，什么又是镜花水月&lt;/p&gt;
&lt;p&gt;而你手中握着的那些东西，又可曾真正珍惜过&lt;/p&gt;
&lt;p&gt;岁月绵长，你总会找到自己的归宿&lt;/p&gt;
&lt;p&gt;果果，&lt;/p&gt;

    
    </summary>
    
      <category term="365" scheme="http://www.voyax.me/categories/365/"/>
    
    
  </entry>
  
  <entry>
    <title>TED 一个简单的方式戒掉坏习惯</title>
    <link href="http://www.voyax.me/posts/24157/"/>
    <id>http://www.voyax.me/posts/24157/</id>
    <published>2016-11-01T05:08:56.000Z</published>
    <updated>2017-07-10T15:47:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>安静、思考、放松，是一个非常享受的过程<br>  幸对清风皓月，苔茵展、云幕高张</p>
</blockquote>
<a id="more"></a>
<iframe src="https://embed.ted.com/talks/judson_brewer_a_simple_way_to_break_a_bad_habit" width="100%" height="360" frameborder="0" scrolling="no" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe>

<p>Can we break bad habits by being more curious about them? Psychiatrist Judson Brewer studies the relationship between mindfulness and addiction — from smoking to overeating to all those other things we do even though we know they’re bad for us. Learn more about the mechanism of habit development and discover a simple but profound tactic that might help you beat your next urge to smoke, snack or check a text while driving.</p>
<p>When I was first learning to meditate, the instruction was to simply pay attention to my breath, and when my mind wandered, to bring it back.<br>0:19<br>Sounded simple enough. Yet I’d sit on these silent retreats, sweating through T-shirts in the middle of winter. I’d take naps every chance I got because it was really hard work. Actually, it was exhausting. The instruction was simple enough but I was missing something really important.<br>0:39<br>So why is it so hard to pay attention? Well, studies show that even when we’re really trying to pay attention to something – like maybe this talk – at some point, about half of us will drift off into a daydream, or have this urge to check our Twitter feed.<br>0:55<br>So what’s going on here? It turns out that we’re fighting one of the most evolutionarily-conserved learning processes currently known in science, one that’s conserved back to the most basic nervous systems known to man.<br>1:08<br>This reward-based learning process is called positive and negative reinforcement, and basically goes like this. We see some food that looks good, our brain says, “Calories! … Survival!” We eat the food, we taste it – it tastes good. And especially with sugar, our bodies send a signal to our brain that says, “Remember what you’re eating and where you found it.” We lay down this context-dependent memory and learn to repeat the process next time. See food, eat food, feel good, repeat. Trigger, behavior, reward.<br>1:42<br>Simple, right? Well, after a while, our creative brains say, “You know what? You can use this for more than just remembering where food is. You know, next time you feel bad, why don’t you try eating something good so you’ll feel better?” We thank our brains for the great idea, try this and quickly learn that if we eat chocolate or ice cream when we’re mad or sad, we feel better.<br>2:07<br>Same process, just a different trigger. Instead of this hunger signal coming from our stomach, this emotional signal – feeling sad – triggers that urge to eat.<br>2:18<br>Maybe in our teenage years, we were a nerd at school, and we see those rebel kids outside smoking and we think, “Hey, I want to be cool.” So we start smoking. The Marlboro Man wasn’t a dork, and that was no accident. See cool, smoke to be cool, feel good. Repeat. Trigger, behavior, reward. And each time we do this, we learn to repeat the process and it becomes a habit. So later, feeling stressed out triggers that urge to smoke a cigarette or to eat something sweet.<br>2:52<br>Now, with these same brain processes, we’ve gone from learning to survive to literally killing ourselves with these habits. Obesity and smoking are among the leading preventable causes of morbidity and mortality in the world.<br>3:06<br>So back to my breath. What if instead of fighting our brains, or trying to force ourselves to pay attention, we instead tapped into this natural, reward-based learning process … but added a twist? What if instead we just got really curious about what was happening in our momentary experience?<br>3:24<br>I’ll give you an example. In my lab, we studied whether mindfulness training could help people quit smoking. Now, just like trying to force myself to pay attention to my breath, they could try to force themselves to quit smoking. And the majority of them had tried this before and failed – on average, six times.<br>3:42<br>Now, with mindfulness training, we dropped the bit about forcing and instead focused on being curious. In fact, we even told them to smoke. What? Yeah, we said, “Go ahead and smoke, just be really curious about what it’s like when you do.”<br>3:57<br>And what did they notice? Well here’s an example from one of our smokers. She said, “Mindful smoking: smells like stinky cheese and tastes like chemicals, YUCK!” Now, she knew, cognitively that smoking was bad for her, that’s why she joined our program. What she discovered just by being curiously aware when she smoked was that smoking tastes like shit.<br>4:22<br>(Laughter)<br>4:25<br>Now, she moved from knowledge to wisdom. She moved from knowing in her head that smoking was bad for her to knowing it in her bones, and the spell of smoking was broken. She started to become disenchanted with her behavior.<br>4:41<br>Now, the prefrontal cortex, that youngest part of our brain from an evolutionary perspective, it understands on an intellectual level that we shouldn’t smoke. And it tries its hardest to help us change our behavior, to help us stop smoking, to help us stop eating that second, that third, that fourth cookie. We call this cognitive control. We’re using cognition to control our behavior. Unfortunately, this is also the first part of our brain that goes offline when we get stressed out, which isn’t that helpful.<br>5:13<br>Now, we can all relate to this in our own experience. We’re much more likely to do things like yell at our spouse or kids when we’re stressed out or tired, even though we know it’s not going to be helpful. We just can’t help ourselves.<br>5:26<br>When the prefrontal cortex goes offline, we fall back into our old habits, which is why this disenchantment is so important. Seeing what we get from our habits helps us understand them at a deeper level – to know it in our bones so we don’t have to force ourselves to hold back or restrain ourselves from behavior. We’re just less interested in doing it in the first place.<br>5:45<br>And this is what mindfulness is all about: Seeing really clearly what we get when we get caught up in our behaviors, becoming disenchanted on a visceral level and from this disenchanted stance, naturally letting go.<br>5:59<br>This isn’t to say that, poof, magically we quit smoking. But over time, as we learn to see more and more clearly the results of our actions, we let go of old habits and form new ones.<br>6:11<br>The paradox here is that mindfulness is just about being really interested in getting close and personal with what’s actually happening in our bodies and minds from moment to moment. This willingness to turn toward our experience rather than trying to make unpleasant cravings go away as quickly as possible. And this willingness to turn toward our experience is supported by curiosity, which is naturally rewarding.<br>6:34<br>What does curiosity feel like? It feels good. And what happens when we get curious? We start to notice that cravings are simply made up of body sensations – oh, there’s tightness, there’s tension, there’s restlessness – and that these body sensations come and go. These are bite-size pieces of experiences that we can manage from moment to moment rather than getting clobbered by this huge, scary craving that we choke on.<br>7:01<br>In other words, when we get curious, we step out of our old, fear-based, reactive habit patterns, and we step into being. We become this inner scientist where we’re eagerly awaiting that next data point.<br>7:17<br>Now, this might sound too simplistic to affect behavior. But in one study, we found that mindfulness training was twice as good as gold standard therapy at helping people quit smoking. So it actually works.<br>7:30<br>And when we studied the brains of experienced meditators, we found that parts of a neural network of self-referential processing called the default mode network were at play. Now, one current hypothesis is that a region of this network, called the posterior cingulate cortex, is activated not necessarily by craving itself but when we get caught up in it, when we get sucked in, and it takes us for a ride.<br>7:52<br>In contrast, when we let go – step out of the process just by being curiously aware of what’s happening – this same brain region quiets down.<br>8:02<br>Now we’re testing app and online-based mindfulness training programs that target these core mechanisms and, ironically, use the same technology that’s driving us to distraction to help us step out of our unhealthy habit patterns of smoking, of stress eating and other addictive behaviors.<br>8:20<br>Now, remember that bit about context-dependent memory? We can deliver these tools to peoples’ fingertips in the contexts that matter most. So we can help them tap into their inherent capacity to be curiously aware right when that urge to smoke or stress eat or whatever arises.<br>8:37<br>So if you don’t smoke or stress eat, maybe the next time you feel this urge to check your email when you’re bored, or you’re trying to distract yourself from work, or maybe to compulsively respond to that text message when you’re driving, see if you can tap into this natural capacity, just be curiously aware of what’s happening in your body and mind in that moment. It will just be another chance to perpetuate one of our endless and exhaustive habit loops … or step out of it.<br>9:05<br>Instead of see text message, compulsively text back, feel a little bit better – notice the urge, get curious, feel the joy of letting go and repeat.<br>9:16<br>Thank you.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;安静、思考、放松，是一个非常享受的过程&lt;br&gt;  幸对清风皓月，苔茵展、云幕高张&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;iframe src=&quot;https://embed.ted.com/talks/judson_brewer_a_simple_way_to_break_a_bad_habit&quot; width=&quot;100%&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Can we break bad habits by being more curious about them? Psychiatrist Judson Brewer studies the relationship between mindfulness and addiction — from smoking to overeating to all those other things we do even though we know they’re bad for us. Learn more about the mechanism of habit development and discover a simple but profound tactic that might help you beat your next urge to smoke, snack or check a text while driving.&lt;/p&gt;
&lt;p&gt;When I was first learning to meditate, the instruction was to simply pay attention to my breath, and when my mind wandered, to bring it back.&lt;br&gt;0:19&lt;br&gt;Sounded simple enough. Yet I’d sit on these silent retreats, sweating through T-shirts in the middle of winter. I’d take naps every chance I got because it was really hard work. Actually, it was exhausting. The instruction was simple enough but I was missing something really important.&lt;br&gt;0:39&lt;br&gt;So why is it so hard to pay attention? Well, studies show that even when we’re really trying to pay attention to something – like maybe this talk – at some point, about half of us will drift off into a daydream, or have this urge to check our Twitter feed.&lt;br&gt;0:55&lt;br&gt;So what’s going on here? It turns out that we’re fighting one of the most evolutionarily-conserved learning processes currently known in science, one that’s conserved back to the most basic nervous systems known to man.&lt;br&gt;1:08&lt;br&gt;This reward-based learning process is called positive and negative reinforcement, and basically goes like this. We see some food that looks good, our brain says, “Calories! … Survival!” We eat the food, we taste it – it tastes good. And especially with sugar, our bodies send a signal to our brain that says, “Remember what you’re eating and where you found it.” We lay down this context-dependent memory and learn to repeat the process next time. See food, eat food, feel good, repeat. Trigger, behavior, reward.&lt;br&gt;1:42&lt;br&gt;Simple, right? Well, after a while, our creative brains say, “You know what? You can use this for more than just remembering where food is. You know, next time you feel bad, why don’t you try eating something good so you’ll feel better?” We thank our brains for the great idea, try this and quickly learn that if we eat chocolate or ice cream when we’re mad or sad, we feel better.&lt;br&gt;2:07&lt;br&gt;Same process, just a different trigger. Instead of this hunger signal coming from our stomach, this emotional signal – feeling sad – triggers that urge to eat.&lt;br&gt;2:18&lt;br&gt;Maybe in our teenage years, we were a nerd at school, and we see those rebel kids outside smoking and we think, “Hey, I want to be cool.” So we start smoking. The Marlboro Man wasn’t a dork, and that was no accident. See cool, smoke to be cool, feel good. Repeat. Trigger, behavior, reward. And each time we do this, we learn to repeat the process and it becomes a habit. So later, feeling stressed out triggers that urge to smoke a cigarette or to eat something sweet.&lt;br&gt;2:52&lt;br&gt;Now, with these same brain processes, we’ve gone from learning to survive to literally killing ourselves with these habits. Obesity and smoking are among the leading preventable causes of morbidity and mortality in the world.&lt;br&gt;3:06&lt;br&gt;So back to my breath. What if instead of fighting our brains, or trying to force ourselves to pay attention, we instead tapped into this natural, reward-based learning process … but added a twist? What if instead we just got really curious about what was happening in our momentary experience?&lt;br&gt;3:24&lt;br&gt;I’ll give you an example. In my lab, we studied whether mindfulness training could help people quit smoking. Now, just like trying to force myself to pay attention to my breath, they could try to force themselves to quit smoking. And the majority of them had tried this before and failed – on average, six times.&lt;br&gt;3:42&lt;br&gt;Now, with mindfulness training, we dropped the bit about forcing and instead focused on being curious. In fact, we even told them to smoke. What? Yeah, we said, “Go ahead and smoke, just be really curious about what it’s like when you do.”&lt;br&gt;3:57&lt;br&gt;And what did they notice? Well here’s an example from one of our smokers. She said, “Mindful smoking: smells like stinky cheese and tastes like chemicals, YUCK!” Now, she knew, cognitively that smoking was bad for her, that’s why she joined our program. What she discovered just by being curiously aware when she smoked was that smoking tastes like shit.&lt;br&gt;4:22&lt;br&gt;(Laughter)&lt;br&gt;4:25&lt;br&gt;Now, she moved from knowledge to wisdom. She moved from knowing in her head that smoking was bad for her to knowing it in her bones, and the spell of smoking was broken. She started to become disenchanted with her behavior.&lt;br&gt;4:41&lt;br&gt;Now, the prefrontal cortex, that youngest part of our brain from an evolutionary perspective, it understands on an intellectual level that we shouldn’t smoke. And it tries its hardest to help us change our behavior, to help us stop smoking, to help us stop eating that second, that third, that fourth cookie. We call this cognitive control. We’re using cognition to control our behavior. Unfortunately, this is also the first part of our brain that goes offline when we get stressed out, which isn’t that helpful.&lt;br&gt;5:13&lt;br&gt;Now, we can all relate to this in our own experience. We’re much more likely to do things like yell at our spouse or kids when we’re stressed out or tired, even though we know it’s not going to be helpful. We just can’t help ourselves.&lt;br&gt;5:26&lt;br&gt;When the prefrontal cortex goes offline, we fall back into our old habits, which is why this disenchantment is so important. Seeing what we get from our habits helps us understand them at a deeper level – to know it in our bones so we don’t have to force ourselves to hold back or restrain ourselves from behavior. We’re just less interested in doing it in the first place.&lt;br&gt;5:45&lt;br&gt;And this is what mindfulness is all about: Seeing really clearly what we get when we get caught up in our behaviors, becoming disenchanted on a visceral level and from this disenchanted stance, naturally letting go.&lt;br&gt;5:59&lt;br&gt;This isn’t to say that, poof, magically we quit smoking. But over time, as we learn to see more and more clearly the results of our actions, we let go of old habits and form new ones.&lt;br&gt;6:11&lt;br&gt;The paradox here is that mindfulness is just about being really interested in getting close and personal with what’s actually happening in our bodies and minds from moment to moment. This willingness to turn toward our experience rather than trying to make unpleasant cravings go away as quickly as possible. And this willingness to turn toward our experience is supported by curiosity, which is naturally rewarding.&lt;br&gt;6:34&lt;br&gt;What does curiosity feel like? It feels good. And what happens when we get curious? We start to notice that cravings are simply made up of body sensations – oh, there’s tightness, there’s tension, there’s restlessness – and that these body sensations come and go. These are bite-size pieces of experiences that we can manage from moment to moment rather than getting clobbered by this huge, scary craving that we choke on.&lt;br&gt;7:01&lt;br&gt;In other words, when we get curious, we step out of our old, fear-based, reactive habit patterns, and we step into being. We become this inner scientist where we’re eagerly awaiting that next data point.&lt;br&gt;7:17&lt;br&gt;Now, this might sound too simplistic to affect behavior. But in one study, we found that mindfulness training was twice as good as gold standard therapy at helping people quit smoking. So it actually works.&lt;br&gt;7:30&lt;br&gt;And when we studied the brains of experienced meditators, we found that parts of a neural network of self-referential processing called the default mode network were at play. Now, one current hypothesis is that a region of this network, called the posterior cingulate cortex, is activated not necessarily by craving itself but when we get caught up in it, when we get sucked in, and it takes us for a ride.&lt;br&gt;7:52&lt;br&gt;In contrast, when we let go – step out of the process just by being curiously aware of what’s happening – this same brain region quiets down.&lt;br&gt;8:02&lt;br&gt;Now we’re testing app and online-based mindfulness training programs that target these core mechanisms and, ironically, use the same technology that’s driving us to distraction to help us step out of our unhealthy habit patterns of smoking, of stress eating and other addictive behaviors.&lt;br&gt;8:20&lt;br&gt;Now, remember that bit about context-dependent memory? We can deliver these tools to peoples’ fingertips in the contexts that matter most. So we can help them tap into their inherent capacity to be curiously aware right when that urge to smoke or stress eat or whatever arises.&lt;br&gt;8:37&lt;br&gt;So if you don’t smoke or stress eat, maybe the next time you feel this urge to check your email when you’re bored, or you’re trying to distract yourself from work, or maybe to compulsively respond to that text message when you’re driving, see if you can tap into this natural capacity, just be curiously aware of what’s happening in your body and mind in that moment. It will just be another chance to perpetuate one of our endless and exhaustive habit loops … or step out of it.&lt;br&gt;9:05&lt;br&gt;Instead of see text message, compulsively text back, feel a little bit better – notice the urge, get curious, feel the joy of letting go and repeat.&lt;br&gt;9:16&lt;br&gt;Thank you.&lt;/p&gt;

    
    </summary>
    
      <category term="365" scheme="http://www.voyax.me/categories/365/"/>
    
    
  </entry>
  
  <entry>
    <title>近期书单</title>
    <link href="http://www.voyax.me/posts/25802/"/>
    <id>http://www.voyax.me/posts/25802/</id>
    <published>2016-10-22T02:46:20.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oe54phg1r.bkt.clouddn.com/blog/2016-10-22-11%3A01%3A16.jpg" alt=""></p>
<ul>
<li><p><a href="https://github.com/css-modules/css-modules" target="_blank" rel="external">CSS Module</a>:<a href="https://github.com/css-modules/css-modules" target="_blank" rel="external">https://github.com/css-modules/css-modules</a></p>
<p>  9月遗留产物，花点时间读、翻译、做案例</p>
</li>
<li><p><a href="http://www.pro-react.com" target="_blank" rel="external">《Pro React》</a>：<a href="http://www.pro-react.com" target="_blank" rel="external">http://www.pro-react.com</a></p>
<p>  重看React；除官方文档，目前唯一推荐，可参考作为我们自己的教程大纲；已下载，在本地</p>
</li>
<li>月底前翻译完<a href="https://css-guide.voyax.me" target="_blank" rel="external">《CSS高级指南》</a></li>
<li>调研Paper.js</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oe54phg1r.bkt.clouddn.com/blog/2016-10-22-11%3A01%3A16.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/css-modules/css-modules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Module&lt;/a&gt;:&lt;a href=&quot;https://github.com/css-modules/css-modules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/css-modules/css-modules&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  9月遗留产物，花点时间读、翻译、做案例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.pro-react.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Pro React》&lt;/a&gt;：&lt;a href=&quot;http://www.pro-react.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.pro-react.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  重看React；除官方文档，目前唯一推荐，可参考作为我们自己的教程大纲；已下载，在本地&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;月底前翻译完&lt;a href=&quot;https://css-guide.voyax.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《CSS高级指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;调研Paper.js&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
    
      <category term="前端" scheme="http://www.voyax.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>TED 说话的艺术</title>
    <link href="http://www.voyax.me/posts/34811/"/>
    <id>http://www.voyax.me/posts/34811/</id>
    <published>2016-10-21T07:11:54.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://embed.ted.com/talks/julian_treasure_how_to_speak_so_that_people_want_to_listen" width="100%" height="360" frameborder="0" scrolling="no" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe>

<blockquote>
<p>Julian Treasure《How to speak so that people want to listen》，从上小学开始，我们就被教导怎么在大家面前说话，怎么上台演讲，但理论上的东西对经验不足的我们很难有实质影响，这个演讲的内容你可以认为是老生常谈，但是回头看看却是金玉良言</p>
</blockquote>
<p>大学语文课现在还拥有的记忆之一：反复强调，上台演讲你要是紧张，说话就会不自觉地快，要控制语速，慢下来；这个小技巧帮我面试、做报告提升了不少</p>
<p>Julian Treasure 谈到说话时的一些不好习惯以及好的方式，总结起来，分软和硬两个方面：</p>
<ul>
<li>软: 学会尊重你的听众，换位思考；己所不欲勿施于人</li>
<li>硬：学会发音、控制说话节奏，把说话当成一门艺术来修炼</li>
</ul>
<h2 id="说话七宗罪"><a href="#说话七宗罪" class="headerlink" title="说话七宗罪"></a>说话七宗罪</h2><ol>
<li><strong>流言蜚语：</strong>在背后说某些人的坏话。 这不是一个好习惯，我们都很明白 那个说闲话的人在五分钟以后 就会在别人跟前说我们的闲话。</li>
<li><p><strong>评判：</strong>我们知道有些人在谈话中是这样的， 这让人很难听进别人的话， 如果你知道你被人评判 且被认为不合格。</p>
</li>
<li><p><strong>消极：</strong>你能陷入这个泥潭。 我的母亲，在她生命的最后几年里， 变得非常非常消极，很难让人听她说话。 我记得有一天，我对她说， “今天是十月一号，” 她说，“我知道，这不可怕吗？” （笑声） 当某人那么消极的时候是很难让人听进去的。</p>
</li>
<li><p><strong>抱怨：</strong>这是英国的全国性艺术。 是我们的全国性运动。我们抱怨天气， 体育和政治，几乎每件事， 但实际上抱怨是病毒性的悲催， 它不会在这个世界上传播太阳和光明。</p>
</li>
<li><p><strong>借口：</strong>我们都遇上过这个家伙。 也许我们都曾经是这个家伙。 有些人有指责癖好。 他们怪罪任何人 而不是对自己的行为负责任， 所以，这又是让人难以聆听的一种。</p>
</li>
<li><p><strong>浮夸，吹牛：</strong>它有时贬低了我们的语言，事实上。 比如，如果我看见 什么真的很神奇的事情， 那我该说什么呢？ （笑声） 当然这种夸大后来就变成了说谎。 彻头彻尾的说谎，我们就不想听 这种我们知道会说谎的人。</p>
</li>
<li><p><strong>固执己见：</strong>把事实和意见混淆。 当这两件事混为一谈， 你就像在听风一样。 你知道，有人用他们自己的意见来强迫你。 这很难让我们听讲。</p>
</li>
</ol>
<h2 id="HAIL"><a href="#HAIL" class="headerlink" title="HAIL"></a>HAIL</h2><blockquote>
<p>这一部分直接引用原文，无歧义更有意思</p>
</blockquote>
<ul>
<li><strong>Honesty:</strong> be clear and straight</li>
<li><strong>Authenticity:</strong> be yourself</li>
<li><strong>Integrity:</strong> be your word</li>
<li><strong>Love:</strong> wish them well</li>
</ul>
<h2 id="说话技巧"><a href="#说话技巧" class="headerlink" title="说话技巧"></a>说话技巧</h2><ul>
<li>音域</li>
<li>音色</li>
<li>韵律（抑扬顿挫）</li>
<li>语速</li>
<li>音量</li>
</ul>
<p>Julian Treasure特别强调了<strong>“沉默”</strong>，好像留白，说得俗点，学会“装B”，在适当的时候沉默，可以帮你提升境界</p>
<h2 id="预热"><a href="#预热" class="headerlink" title="预热"></a>预热</h2><p>视频最后，演示了开讲前预热准备，蛮好玩的，看视频模仿下，试了下，蛮提升精神的</p>
]]></content>
    
    <summary type="html">
    
      &lt;iframe src=&quot;https://embed.ted.com/talks/julian_treasure_how_to_speak_so_that_people_want_to_listen&quot; width=&quot;100%&quot; height=&quot;360&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;Julian Treasure《How to speak so that people want to listen》，从上小学开始，我们就被教导怎么在大家面前说话，怎么上台演讲，但理论上的东西对经验不足的我们很难有实质影响，这个演讲的内容你可以认为是老生常谈，但是回头看看却是金玉良言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大学语文课现在还拥有的记忆之一：反复强调，上台演讲你要是紧张，说话就会不自觉地快，要控制语速，慢下来；这个小技巧帮我面试、做报告提升了不少&lt;/p&gt;
&lt;p&gt;Julian Treasure 谈到说话时的一些不好习惯以及好的方式，总结起来，分软和硬两个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软: 学会尊重你的听众，换位思考；己所不欲勿施于人&lt;/li&gt;
&lt;li&gt;硬：学会发音、控制说话节奏，把说话当成一门艺术来修炼&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;说话七宗罪&quot;&gt;&lt;a href=&quot;#说话七宗罪&quot; class=&quot;headerlink&quot; title=&quot;说话七宗罪&quot;&gt;&lt;/a&gt;说话七宗罪&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;流言蜚语：&lt;/strong&gt;在背后说某些人的坏话。 这不是一个好习惯，我们都很明白 那个说闲话的人在五分钟以后 就会在别人跟前说我们的闲话。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;评判：&lt;/strong&gt;我们知道有些人在谈话中是这样的， 这让人很难听进别人的话， 如果你知道你被人评判 且被认为不合格。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;消极：&lt;/strong&gt;你能陷入这个泥潭。 我的母亲，在她生命的最后几年里， 变得非常非常消极，很难让人听她说话。 我记得有一天，我对她说， “今天是十月一号，” 她说，“我知道，这不可怕吗？” （笑声） 当某人那么消极的时候是很难让人听进去的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;抱怨：&lt;/strong&gt;这是英国的全国性艺术。 是我们的全国性运动。我们抱怨天气， 体育和政治，几乎每件事， 但实际上抱怨是病毒性的悲催， 它不会在这个世界上传播太阳和光明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;借口：&lt;/strong&gt;我们都遇上过这个家伙。 也许我们都曾经是这个家伙。 有些人有指责癖好。 他们怪罪任何人 而不是对自己的行为负责任， 所以，这又是让人难以聆听的一种。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;浮夸，吹牛：&lt;/strong&gt;它有时贬低了我们的语言，事实上。 比如，如果我看见 什么真的很神奇的事情， 那我该说什么呢？ （笑声） 当然这种夸大后来就变成了说谎。 彻头彻尾的说谎，我们就不想听 这种我们知道会说谎的人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;固执己见：&lt;/strong&gt;把事实和意见混淆。 当这两件事混为一谈， 你就像在听风一样。 你知道，有人用他们自己的意见来强迫你。 这很难让我们听讲。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;HAIL&quot;&gt;&lt;a href=&quot;#HAIL&quot; class=&quot;headerlink&quot; title=&quot;HAIL&quot;&gt;&lt;/a&gt;HAIL&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这一部分直接引用原文，无歧义更有意思&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Honesty:&lt;/strong&gt; be clear and straight&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authenticity:&lt;/strong&gt; be yourself&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity:&lt;/strong&gt; be your word&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Love:&lt;/strong&gt; wish them well&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="365" scheme="http://www.voyax.me/categories/365/"/>
    
    
  </entry>
  
  <entry>
    <title>小白翻墙（shadowsocks篇）</title>
    <link href="http://www.voyax.me/posts/27305/"/>
    <id>http://www.voyax.me/posts/27305/</id>
    <published>2016-10-17T07:54:21.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章只会告诉你怎么用shadowsocks翻墙，不提供账号</p>
<p>shadowsocks个版本下载地址：</p>
<ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/3.3.3/Shadowsocks-3.3.3.zip" target="_blank" rel="external">Windows</a></li>
<li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/1.3/ShadowsocksX-NG-1.3.dmg" target="_blank" rel="external">Mac OS X</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="external">Android</a></li>
<li><a href="https://play.google.com/store/apps/details?id=com.github.shadowsocks" target="_blank" rel="external">IOS</a></li>
</ul>
<p>如果我们很熟，我可以给你共享我自己搭建的服务；其他，还请自己购买<br><a id="more"></a></p>
<p>shadowsocks简单配置下其实就可以了，所以接下来的教程其实很水的……</p>
<ol>
<li>下载相应的客户端，安装，启动<br>（windows如果提示安装<code>.net framework</code>，安装系统对应的版本）</li>
<li>打开服务器设定（Windows上也一样）<br><img src="http://ww3.sinaimg.cn/large/801b780agw1f8vaao56n7j20rb0jddj1.jpg" alt=""></li>
<li><p>输入shadowsocks账号<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f8vbr4bzvij20f309xgm4.jpg" alt=""></p>
<p>配置项说明如下：</p>
<pre><code>*   **地址:** 远程服务器的**ip**以及**端口**
</code></pre><p>比如：<code>45.90.55.201:6363</code></p>
<ul>
<li><strong>加密：</strong>下拉你会看到很多加密方式，选择你的账号提供者给你的加密方式</li>
<li><strong>密码：</strong>账号对应的密码</li>
<li>备注：这个就随意填</li>
</ul>
<p>输入完后，点击<code>确认</code>，完成配置</p>
<p>你可以添加多个账号，在某个账号不稳定时随时切到其他账号</p>
<p>到现在，基本搞定，如果你的账号没问题，那现在就可以了</p>
</li>
<li><p>查看日志</p>
<p>如果出现了问题，点击<code>显示日志</code>，查找原因<br><img src="http://ww2.sinaimg.cn/large/801b780agw1f8vbry9ib7j20ce0jmgnm.jpg" alt=""></p>
</li>
<li><p>PAC和全局代理</p>
<p>自动代理模式对应一个规则文件，只有里边的域名才会走代理模式；而全局代理是所有请求都是通过代理；</p>
</li>
</ol>
<p>在自动代理模式下，你可以从giflist更新规则规则，也可以自己添加或者删除域名：<br><img src="http://ww3.sinaimg.cn/large/801b780agw1f8vccd6vnfj215i0qn0vu.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章只会告诉你怎么用shadowsocks翻墙，不提供账号&lt;/p&gt;
&lt;p&gt;shadowsocks个版本下载地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-windows/releases/download/3.3.3/Shadowsocks-3.3.3.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/1.3/ShadowsocksX-NG-1.3.dmg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac OS X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.github.shadowsocks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.github.shadowsocks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们很熟，我可以给你共享我自己搭建的服务；其他，还请自己购买&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;shadowsocks简单配置下其实就可以了，所以接下来的教程其实很水的……&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载相应的客户端，安装，启动&lt;br&gt;（windows如果提示安装&lt;code&gt;.net framework&lt;/code&gt;，安装系统对应的版本）&lt;/li&gt;
&lt;li&gt;打开服务器设定（Windows上也一样）&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780agw1f8vaao56n7j20rb0jddj1.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入shadowsocks账号&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/801b780agw1f8vbr4bzvij20f309xgm4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;配置项说明如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   **地址:** 远程服务器的**ip**以及**端口**
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;比如：&lt;code&gt;45.90.55.201:6363&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加密：&lt;/strong&gt;下拉你会看到很多加密方式，选择你的账号提供者给你的加密方式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密码：&lt;/strong&gt;账号对应的密码&lt;/li&gt;
&lt;li&gt;备注：这个就随意填&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入完后，点击&lt;code&gt;确认&lt;/code&gt;，完成配置&lt;/p&gt;
&lt;p&gt;你可以添加多个账号，在某个账号不稳定时随时切到其他账号&lt;/p&gt;
&lt;p&gt;到现在，基本搞定，如果你的账号没问题，那现在就可以了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看日志&lt;/p&gt;
&lt;p&gt;如果出现了问题，点击&lt;code&gt;显示日志&lt;/code&gt;，查找原因&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/801b780agw1f8vbry9ib7j20ce0jmgnm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PAC和全局代理&lt;/p&gt;
&lt;p&gt;自动代理模式对应一个规则文件，只有里边的域名才会走代理模式；而全局代理是所有请求都是通过代理；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在自动代理模式下，你可以从giflist更新规则规则，也可以自己添加或者删除域名：&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780agw1f8vccd6vnfj215i0qn0vu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="工具" scheme="http://www.voyax.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>透析Margin Collapsing</title>
    <link href="http://www.voyax.me/posts/39401/"/>
    <id>http://www.voyax.me/posts/39401/</id>
    <published>2016-09-21T02:15:18.000Z</published>
    <updated>2017-06-18T09:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果不是太粗犷，margin collapsing会是CSS中出现频率很高的一个问题。读完这篇文章，应该彻底明白：</p>
<ol>
<li>什么情况下会触发margin collapsing</li>
<li>有哪些解决方法</li>
</ol>
<blockquote>
<p>这篇文章同时是《CSS内功心法》补充资料，感兴趣的同学可以查看完整的<a href="http://www.4guangnian.com/" target="_blank" rel="external">CSS课程</a></p>
</blockquote>
<a id="more"></a>
<p>来自W3C的描述：</p>
<blockquote>
<p>In CSS, the adjoining margins of two or more boxes (which might or might not be siblings) can combine to form a single margin. Margins that combine this way are said to collapse, and the resulting combined margin is called a collapsed margin.</p>
<p>Adjoining vertical margins collapse, except:</p>
<p>Margins of the root element’s box do not collapse.<br>If the top and bottom margins of an element with clearance are adjoining, its margins collapse with the adjoining margins of following siblings but that resulting margin does not collapse with the bottom margin of the parent block.</p>
</blockquote>
<p>也就是说，只有<code>margin</code><strong>毗邻</strong>的<strong>两个或者多个</strong>元素(既可以是相邻节点，也可以是父子节点)才会发生外边距折叠。</p>
<h2 id="margin-collapsing-条件"><a href="#margin-collapsing-条件" class="headerlink" title="margin collapsing 条件"></a>margin collapsing 条件</h2><ul>
<li><code>margin</code>毗邻（可以是兄弟节点之间也可以是父子节点之间）</li>
<li>两个或两个以上</li>
</ul>
<p><strong>什么是毗邻？</strong></p>
<p><code>adjoining margin</code>具体说明如下：</p>
<blockquote>
<p>Two margins are adjoining if and only if:</p>
<ul>
<li>both belong to in-flow block-level boxes that participate in the same block formatting context</li>
<li>no line boxes, no clearance, no padding and no border separate them (Note that certain zero-height line boxes (see 9.4.2) are ignored for this purpose.)</li>
<li>both belong to vertically-adjacent box edges, i.e. form one of the following pairs:<ul>
<li>top margin of a box and top margin of its first in-flow child</li>
<li>bottom margin of box and top margin of its next in-flow following sibling</li>
<li>bottom margin of a last in-flow child and bottom margin of its parent if the parent has ‘auto’ computed height</li>
<li>top and bottom margins of a box that does not establish a new block formatting context and that has zero computed ‘min-height’, zero or ‘auto’ computed ‘height’, and no in-flow children</li>
</ul>
</li>
</ul>
</blockquote>
<p>两个<code>margin adjoining</code>有且仅满足：</p>
<ul>
<li>属于同一个BFC</li>
<li><p><strong>相邻margin之间</strong>没有行盒、clearance、padding、border分隔（注意看加粗的文字）</p>
<p>  这里我的理解是，相邻的兄弟元素的<code>bottom margin</code>和<code>top margin</code>之间不可能有<code>clearance</code>、<code>padding</code>、<code>border</code>的</p>
<p>  注意，行盒是可行的，只需要将它们设置成<code>inline-block</code></p>
</li>
<li><p>垂直方向margin相邻，满足如下四种情况中的一个：</p>
<ul>
<li>一个元素的<code>top margin</code>和它的第一个子元素的<code>top margin</code></li>
<li>一个元素的<code>bottom margin</code>和其相邻的兄弟元素的<code>top margin</code></li>
<li>父元素高度必须是<code>auto</code>，那么父元素的<code>bottom margin</code>和其最后一个子元素的<code>bottom margin</code></li>
<li>一个元素自己的<code>top margin</code>和<code>bottom margin</code>也可以发生折叠：没有创建BFC、<code>min-height</code>为<code>0</code>（默认值）、<code>height</code>为<code>0</code>或者<code>auto</code>，并且没有子元素。</li>
</ul>
</li>
</ul>
<h2 id="阻止margin-collapsing的方法"><a href="#阻止margin-collapsing的方法" class="headerlink" title="阻止margin collapsing的方法"></a>阻止margin collapsing的方法</h2><p>按照上述条件，想想有哪些可行的方法阻止<code>margin collapsing</code>。我的基本思路是：</p>
<ul>
<li>脱离正常文档流</li>
<li>增加line box, padding，border</li>
<li>设置高度（仅适合父元素的<code>bottom margin</code>和最后一个子元素的<code>bottom margin</code>折叠的情况）。</li>
</ul>
<p>为了方便区分，这里按照<strong>相邻的兄弟元素</strong>和<strong>父子元素</strong>简单说明一下：</p>
<h3 id="相邻的兄弟元素"><a href="#相邻的兄弟元素" class="headerlink" title="相邻的兄弟元素"></a>相邻的兄弟元素</h3><p>目前考虑到的能应用于实际的方法有两个：</p>
<ul>
<li>脱离文档流： <code>position</code>设置为<code>absolute(fixed)</code>或者<code>float</code></li>
<li><p><code>line box</code>：<code>display</code>设置<code>inline-block</code></p>
<p>  额外补充，行盒是什么：</p>
<blockquote>
<p>The rectangular area that contains the boxes that form a line is called a line box.<br>…<br>When several inline-level boxes cannot fit horizontally within a single line box, they are distributed among two or more vertically-stacked line boxes. Thus, a paragraph is a vertical stack of line boxes.<br>…<br>When an inline box exceeds the width of a line box, it is split into several boxes and these boxes are distributed across several line boxes. If an inline box cannot be split (e.g., if the inline box contains a single character, or language specific word breaking rules disallow a break within the inline box, or if the inline box is affected by a white-space value of nowrap or pre), then the inline box overflows the line box.</p>
</blockquote>
</li>
</ul>
<h3 id="父元素和子元素"><a href="#父元素和子元素" class="headerlink" title="父元素和子元素"></a>父元素和子元素</h3><p>父元素和子元素的问题相对简单：</p>
<ul>
<li><p>为父元素创建BFC</p>
<p>  关于BFC的详细内容，出门右拐<a href="http://www.voyax.me/2016/04/11/%E8%B0%88%E8%B0%88BFC/">谈谈BFC</a></p>
</li>
<li><p>设置padding 或者 border</p>
<p>  当然也可以为子元素设置<code>inline-block</code>，但是这样会阻止子元素的<code>margin collapsing</code>，也会产生其他副作用，不推荐。很多前辈已经强调过<code>margin collapsing</code>并非bug，它的设计是为了纠正元素之间因为粗心同时设置了margin而偏离预期的错误</p>
</li>
<li><p>指定高度：局限性太大，而且只能解决<code>bottom margin</code>的问题，不推荐</p>
</li>
</ul>
<p>所以其实用得最多的还是BFC和设置padding。举两个经典的例子：</p>
<p><strong><code>clearfix</code></strong></p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cf</span>:before,</div><div class="line"><span class="selector-class">.cf</span>:after &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cf</span>:after &#123;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * For IE 6/7 only</div><div class="line"> * Include this rule to trigger hasLayout and contain floats.</div><div class="line"> */</div><div class="line"><span class="selector-class">.cf</span> &#123;</div><div class="line">    *zoom: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可能见过这样的写法（打开<code>bootstrap</code>的源码看看），其中的妙处在于<code>display: table</code>。</p>
<blockquote>
<p>个人不推荐这种写法，推荐<code>display: block</code>，我们很多时候并不希望去掉<code>margin collapsing</code></p>
</blockquote>
<p>再看另外一个例子：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</div><div class="line">  <span class="attribute">padding-top</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个也是经常用到的</p>
<h2 id="保持一个方向的margin"><a href="#保持一个方向的margin" class="headerlink" title="保持一个方向的margin"></a>保持一个方向的margin</h2><p>最后一个建议：尽量统一仅按照<code>margin-top</code>或者<code>margin-bottom</code>来写</p>
<h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><p><a href="http://cssmojo.com/the-very-latest-clearfix-reloaded/" target="_blank" rel="external">The very latest clearfix reloaded</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果不是太粗犷，margin collapsing会是CSS中出现频率很高的一个问题。读完这篇文章，应该彻底明白：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么情况下会触发margin collapsing&lt;/li&gt;
&lt;li&gt;有哪些解决方法&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这篇文章同时是《CSS内功心法》补充资料，感兴趣的同学可以查看完整的&lt;a href=&quot;http://www.4guangnian.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS课程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;来自W3C的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CSS, the adjoining margins of two or more boxes (which might or might not be siblings) can combine to form a single margin. Margins that combine this way are said to collapse, and the resulting combined margin is called a collapsed margin.&lt;/p&gt;
&lt;p&gt;Adjoining vertical margins collapse, except:&lt;/p&gt;
&lt;p&gt;Margins of the root element’s box do not collapse.&lt;br&gt;If the top and bottom margins of an element with clearance are adjoining, its margins collapse with the adjoining margins of following siblings but that resulting margin does not collapse with the bottom margin of the parent block.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，只有&lt;code&gt;margin&lt;/code&gt;&lt;strong&gt;毗邻&lt;/strong&gt;的&lt;strong&gt;两个或者多个&lt;/strong&gt;元素(既可以是相邻节点，也可以是父子节点)才会发生外边距折叠。&lt;/p&gt;
&lt;h2 id=&quot;margin-collapsing-条件&quot;&gt;&lt;a href=&quot;#margin-collapsing-条件&quot; class=&quot;headerlink&quot; title=&quot;margin collapsing 条件&quot;&gt;&lt;/a&gt;margin collapsing 条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;margin&lt;/code&gt;毗邻（可以是兄弟节点之间也可以是父子节点之间）&lt;/li&gt;
&lt;li&gt;两个或两个以上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;什么是毗邻？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS课程补充" scheme="http://www.voyax.me/categories/CSS%E8%AF%BE%E7%A8%8B%E8%A1%A5%E5%85%85/"/>
    
    
      <category term="CSS" scheme="http://www.voyax.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>《程序员修炼之道》读书笔记——注重实效的哲学</title>
    <link href="http://www.voyax.me/posts/16440/"/>
    <id>http://www.voyax.me/posts/16440/</id>
    <published>2016-09-18T17:10:16.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>“实效”实在是一个非常完美的词，本打算在加上一个批注，叫“如何成为一个高效率的程序员”，仔细想了想，高效率似乎和能出色完成工作还是有很大差距。读完这章，感慨颇深，好比只讲情怀不谈实际的人与喷子只是一念之差，一个好的程序员是该既保持高效，也要为整个项目负责的。</p>
<h2 id="提供解决方案，而不是找借口"><a href="#提供解决方案，而不是找借口" class="headerlink" title="提供解决方案，而不是找借口"></a>提供解决方案，而不是找借口</h2><blockquote>
<p>在所有弱点中，最大的弱点就是害怕暴露弱点。——J.B.Bossuet.Politics</p>
</blockquote>
<p>如果你接受了一个任务，那就应切实负起责任。无论因为什么原因（所有人都会犯错或者叫失误），都应该诚实地承认，并快速给出弥补方案；而不是抱怨你的同事，或者其他各种各样的问题，他们可能确实在其中扮演了不好的角色，但是你可以提前做出解决方案，而不是等到最后才开始抱怨。</p>
<p>抱怨除了惹得别个和你一样生气，啥都没用。</p>
<ul>
<li>如果你觉得你不需要为这个事情负责，或者超出了你的能力，那么无须为这些事情负责。及时提出来，让你的团队能有充足时间进行调整。</li>
<li>如果是你的责任，那么想想还可以如何力缆狂澜，你还需要哪些帮助，下一步如何进行。</li>
</ul>
<p>想起去年刚毕业工作，一个人负责APP的开发和公司所有前端的东西，时不时处理下运营反馈的问题；经常是整个一天很难集中精力开发APP。一次开会，向老板反馈事情太杂效率太低，希望能把部分工作交给xxx后，老板很通情地让我专心开发APP。<br>每个人都很聪明，你的难处别人自然理解；而借口，谁也看得明白。</p>
<h2 id="不要成为第一个弄脏代码的人"><a href="#不要成为第一个弄脏代码的人" class="headerlink" title="不要成为第一个弄脏代码的人"></a>不要成为第一个弄脏代码的人</h2><p>“破窗理论”在代码中似乎更加明显，给你一份格式混乱、变量随意声明、到处都是全局变量、毫无设计的代码时，你会咋办。好吧，我接手前公司广告系统时，我是这么干的</p>
<blockquote>
<p>反正都已经这么乱了，要是动了代码出bug了调都没法调，算了，算了，不管了，反正不是我写的。有什么新的需求，就看情况怎么填塞进去，随便写写就好。</p>
</blockquote>
<p>坚持了段时间，最后还是放弃了，老老实实花时间进行重构。糟糕的代码才真的会让你花费很多时间。</p>
<p>但是如果最开始，代码就十分漂亮——编写整洁、设计良好、并且很优雅，你就很可能会格外注意不去把它弄脏，而且你也不会想成为第一个弄脏代码的人。<br>所以，为了提高自己以及团队的效率：</p>
<ul>
<li>不要成为第一个弄脏代码的人（其他人自然也不会）</li>
<li>不要容忍不好的代码，及时重构（珍爱生命）</li>
</ul>
<h2 id="仰望星空"><a href="#仰望星空" class="headerlink" title="仰望星空"></a>仰望星空</h2><p>有时候，你也许确切地知道需要做什么，以及怎么去做。但是请求许可去处理整个事情，你会遇到拖延和漠然，需要成立一个讨论组，然后大家开会发表意见，每个人都会去护卫自己的资源，事情越来越复杂。有个专门的名字形容这种情形<strong>“启动杂役”</strong>。<br>这个时候，你需要设计出你可以合理要求的东西，好好开发它，一旦完成，就拿给大家看，让他们大吃一惊，然后说：“要是我们增加……可能就会更好”。那个时候，他们会主动找到你开始合作。</p>
<blockquote>
<p>让人们瞥见未来，你就能让他们聚集在你周围</p>
</blockquote>
<p>同时，你还需要保持敏感，多观察新的趋势、周围的环境、新技术等等，温水煮青蛙就完蛋了！</p>
<p>我航校歌《仰望星空》确是真理~</p>
<h2 id="敏捷开发，不要过度修饰"><a href="#敏捷开发，不要过度修饰" class="headerlink" title="敏捷开发，不要过度修饰"></a>敏捷开发，不要过度修饰</h2><blockquote>
<p>欲求更好，常把好事变糟——李尔王</p>
</blockquote>
<p>一个无视用户需求，一味地增加新疼醒、一次又一次润饰代码的程序员，不是一个有<strong>职业素养</strong>的程序员。<br>所有的功能以及代码都是以产品为中心，而不是比谁写的代码炫酷。<br>非常抱歉，本月在开发微信公众号时，我花了大量时间去写看起来很酷的动画、用尽可能新的技术，但是三天的开发期限一到，连基本功能都是还有问题的——以此为戒<br>不要因为过度修饰和过于求精而毁损完好的程序，继续前进，让你的代码凭自己的质量站一会，它也许不完美，但不用担心：它不可能完美。</p>
<ul>
<li>尽快完成基本功能，敏捷开发，快速迭代</li>
<li>预留充足的时间，而不是为了赶上最后期限而削减基本功能</li>
</ul>
<h2 id="持续学习，并保持多元化"><a href="#持续学习，并保持多元化" class="headerlink" title="持续学习，并保持多元化"></a>持续学习，并保持多元化</h2><p>既然选择了程序员这一行业，那就学会享受活到老学到老。</p>
<p>程序员是一个人神奇的职业，技术变化很快，你需要及时更上或者创造新技术，同时你还需要眼观六路耳听八方，要知道互联网的趋势，也要关注各种新科技，哦，可能还要会运营、设计什么的。。。</p>
<p>当然，代码写不好其他都是浮云。</p>
<p>这里有一些学习建议：</p>
<ol>
<li>每年至少学习一种语言：不同语言以不同方式解决相同的问题。通过学习若干不同的方法，可以帮你拓宽思维，避免墨守成规。</li>
<li>每个季度阅读一本技术书籍： 读书时让你升华为高手的捷径，在你技术掌握后，阅读一些与项目无关的书籍，扩宽眼界。</li>
<li>也要阅读非技术书籍：计算机是由人——你在设法满足其需要的人——使用的，不要忘了人这一边。每一次去书店，都会很舒服，那是我最好的放松。</li>
<li>听一听讲座或者沙龙：看一看那些高手在做什么（并非他们说的就是对的或者合适，但是你要自己去发现合适或者不合适的才知道自己如何选择），去认识不同的人，程序员也要有社交。</li>
</ol>
<h2 id="程序员其实是很容易交流的"><a href="#程序员其实是很容易交流的" class="headerlink" title="程序员其实是很容易交流的"></a>程序员其实是很容易交流的</h2><p>网上有很多调侃程序员的段子，大致都是说程序员木讷之类的，程序员要是真的难以交流，那些段子手哪能这么（好像）熟悉程序员的生活……<br>程序员大多专注，老实，所以大家印象还是比较好，这应该算是程序员的优势了<br>但是，表达能力可能却是稍差一些。我见过一个程序员，做工作汇报时，说了两句话，结束了，不知道老板有没有反应过来。。。</p>
<ul>
<li>学会理解你的听众的水平<br>  你的东西要让他们听懂，而不是自己一个人在那自言自语。其实没有什么特定要求，努力让自己多去说，不用怕说错，说得多了，自然就好了。</li>
<li>及时回复<br>  如果你看到了邮件、微信、QQ的消息，希望能及时回复，即使内容只是“我稍后回复你”。你的时间很宝贵，别人的时间一样很宝贵，  随时通知别人，会让他们更容易原谅你偶然的疏忽，并让他们觉得你没有忘记他们。<br>学会感恩，而对于某些不会尊重别人时间的人，你可以考虑移除了。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我相信每一个优秀的程序员都是追求完美的极客，尝试新的东西很好、深挖技术也对，只是时间有限，有了基础版本，才有可能不断去完善细节满足你的情怀。淘宝非一日之功，除了你技术，你还要对产品负责，学会敏捷快发。平时要保持学习的习惯，多看看新的东西，放宽眼界，程序员不要那么死板。</p>
<p>最后推荐一个github上Java程序员Shekhar Gulati的一个项目，<a href="https://github.com/shekhargulati/52-technologies-in-2016" target="_blank" rel="external">《52-technologies-in-2016》</a>，作者每周挑战并学习实践一项新技术，在写这篇文章的时候，作者已经完成了37个任务，你也可以尝试一下。</p>
<p>程序员的时间很宝贵，每个人的时间都很宝贵，节约生命，注重实效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“实效”实在是一个非常完美的词，本打算在加上一个批注，叫“如何成为一个高效率的程序员”，仔细想了想，高效率似乎和能出色完成工作还是有很大差距。读完这章，感慨颇深，好比只讲情怀不谈实际的人与喷子只是一念之差，一个好的程序员是该既保持高效，也要为整个项目负责的。&lt;/p&gt;
&lt;h2 id=&quot;提供解决方案，而不是找借口&quot;&gt;&lt;a href=&quot;#提供解决方案，而不是找借口&quot; class=&quot;headerlink&quot; title=&quot;提供解决方案，而不是找借口&quot;&gt;&lt;/a&gt;提供解决方案，而不是找借口&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在所有弱点中，最大的弱点就是害怕暴露弱点。——J.B.Bossuet.Politics&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你接受了一个任务，那就应切实负起责任。无论因为什么原因（所有人都会犯错或者叫失误），都应该诚实地承认，并快速给出弥补方案；而不是抱怨你的同事，或者其他各种各样的问题，他们可能确实在其中扮演了不好的角色，但是你可以提前做出解决方案，而不是等到最后才开始抱怨。&lt;/p&gt;
&lt;p&gt;抱怨除了惹得别个和你一样生气，啥都没用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你觉得你不需要为这个事情负责，或者超出了你的能力，那么无须为这些事情负责。及时提出来，让你的团队能有充足时间进行调整。&lt;/li&gt;
&lt;li&gt;如果是你的责任，那么想想还可以如何力缆狂澜，你还需要哪些帮助，下一步如何进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想起去年刚毕业工作，一个人负责APP的开发和公司所有前端的东西，时不时处理下运营反馈的问题；经常是整个一天很难集中精力开发APP。一次开会，向老板反馈事情太杂效率太低，希望能把部分工作交给xxx后，老板很通情地让我专心开发APP。&lt;br&gt;每个人都很聪明，你的难处别人自然理解；而借口，谁也看得明白。&lt;/p&gt;
&lt;h2 id=&quot;不要成为第一个弄脏代码的人&quot;&gt;&lt;a href=&quot;#不要成为第一个弄脏代码的人&quot; class=&quot;headerlink&quot; title=&quot;不要成为第一个弄脏代码的人&quot;&gt;&lt;/a&gt;不要成为第一个弄脏代码的人&lt;/h2&gt;&lt;p&gt;“破窗理论”在代码中似乎更加明显，给你一份格式混乱、变量随意声明、到处都是全局变量、毫无设计的代码时，你会咋办。好吧，我接手前公司广告系统时，我是这么干的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;反正都已经这么乱了，要是动了代码出bug了调都没法调，算了，算了，不管了，反正不是我写的。有什么新的需求，就看情况怎么填塞进去，随便写写就好。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://www.voyax.me/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Web中文字体排版指南</title>
    <link href="http://www.voyax.me/posts/59710/"/>
    <id>http://www.voyax.me/posts/59710/</id>
    <published>2016-09-12T12:52:35.000Z</published>
    <updated>2017-06-18T09:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几年有一种说法，网页95%都是排版。这种说法，即使是现在，作为Web开发人员，我们也应该足够重视排版。有时候看到一个网页，就是觉得别扭，不好看，但是作为程序员真的不知道到底哪出了问题！<br>要是有时间，你一定要读一下《写给大家看的设计书》，这本书里边讲了很多简单适用的设计原则，包括<strong>亲密性</strong>，<strong>对齐</strong>，<strong>重复</strong>，<strong>对比</strong>，<strong>颜色</strong>等简单适用的原则）</p>
<p>在没有设计师帮助下，排版和颜色经常是最让我头疼的事，怎么放怎么挑都觉得没有人家专业学设计的好看，但是后来发现，有一些规则，可以快速地让设计看起来更加专业。<br><a id="more"></a></p>
<p><a href="http://www.lhyum.com/demo/lesson_1/" target="_blank" rel="external">简单文字排版：</a><a href="http://www.lhyum.com/demo/lesson_1/" target="_blank" rel="external">http://www.lhyum.com/demo/lesson_1/</a></p>
<h2 id="字体选择"><a href="#字体选择" class="headerlink" title="字体选择"></a>字体选择</h2><p>好的字体，会帮助你的网页看起来更加输入自然。<br>在网页中，中文字体的选择一直都是一个麻烦事，选择中文字体时，你需要考虑到：</p>
<ol>
<li>用户本地的字体有限，你需要兼容不同的操作系统。对于Windows而言，可能就只有预装的<code>宋体、黑体、楷体、仿宋、微软雅黑</code>，如果你网页用了OS X的<code>Helvetica</code>，在Windows，用户实际看到的是<code>Arial</code>。</li>
<li>中文字体体积太大，使用Web Font好像不划算。英文就只有26个字母，但是中文常用汉字就有几千呀，为了看个几百K的网页，要下载几兆的字体，你觉得真的合适么？</li>
<li>不同浏览器对字体的支持也不一样，还没有一种通吃所有浏览器的字体格式（这算是Web Font难做的原因）<br> <img src="http://7fvhf8.com1.z0.glb.clouddn.com/blog/20150127172229900.png" alt="浏览器支持的字体格式"></li>
</ol>
<h3 id="解决方法基本有三个："><a href="#解决方法基本有三个：" class="headerlink" title="解决方法基本有三个："></a>解决方法基本有三个：</h3><ol>
<li>最简单的方法，老老实实制定安全的字体，利用好fallback。</li>
<li>寻找相似字体，你可以在<a href="http://www.cssfontstack.com" target="_blank" rel="external">CSS Font Stack</a>，查找Windows和Mac上相似的字体</li>
<li>还是利用Web Font，推荐<a href="http://font-spider.org" target="_blank" rel="external">font spider</a>，能够解决大小和兼容性的问题。</li>
</ol>
<blockquote>
<p>字蛛通过分析本地 CSS 与 HTML 文件获取 WebFont 中没有使用的字符，并将这些字符数据从字体中删除以实现压缩，同时生成跨浏览器使用的格式。    </p>
</blockquote>
<h3 id="字体fallback"><a href="#字体fallback" class="headerlink" title="字体fallback"></a>字体fallback</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">font-family</span>:<span class="string">"Hiragino Sans GB"</span>,<span class="string">"华文细黑"</span>,<span class="string">"STHeiti"</span>,<span class="string">"微软雅黑"</span>, <span class="string">"Microsoft YaHei"</span>,SimHei,<span class="string">"Helvetica Neue"</span>,Helvetica,Arial,sans-serif;</div></pre></td></tr></table></figure>
<p><strong>fallback</strong>俗称<strong>备胎</strong>，前边的字体没有（或者不包括要渲染的文字），就用后边的，如果所有列出的字体都没有，那么系统会自动匹配类似的字体（同一系列，网页上可以把字体划分为5类，具体请参见<a href="http://www.w3.org/Style/Examples/007/fonts.en.html" target="_blank" rel="external">W3C</a>）。<br><strong>注意</strong>：先指定英文字体，再指定中文字体。不然，渲染出来的是中文的英文和中文的中文(⊙﹏⊙)b（我们要的应该是英文的英文和中文的中文）</p>
<p>参考了苹果、小米、魅族、typebeauty后，整理如下：<br>OS X上：HanHei SC，苹方(PingFang SC)<br>Windows：中易宋体（SimSun），微软雅黑（Microsoft YaHei）<br>Linux：思源黑体（Source Han Sans CN），文泉驿米黑（WenQuanYi Microhei）<br>写成font-family：<br><code>font-family:  &quot;Helvetica Neue&quot;,Helvetica, Arial, &quot;HanHei SC&quot;, &quot;PingFang SC&quot;, SimSun,&quot;Source Han Sans CN&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Microhei&quot;, sans-serif;</code></p>
<h2 id="字号"><a href="#字号" class="headerlink" title="字号"></a>字号</h2><p>我们先定一个基础字号16px（大部分浏览器默认的也是16px），16~24px之间的字号作为阅读都很舒服，都可以作为正文内容的大小。</p>
<p>不同等级的标题，需要用到不同的字号和粗细，反映出文章结构的变化。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">2.25em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h2</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h3</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.7em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h4</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="每行35-60个汉子"><a href="#每行35-60个汉子" class="headerlink" title="每行35-60个汉子"></a>每行35-60个汉子</h2><p>一行中，如果字数太多，会给读者压迫感。字数太少，视线跳动太频繁，很容易让人疲倦。<br>英文一般控制在40-90个单词，中文30-60个字。</p>
<h2 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h2><p>1.5倍的行高目前是采用最广泛的，但是不同字体，给人感觉不一样，所以我一般采用1.8倍的行高，你可以根据自己的需要进行调整。需要注意的是，标题由于字体很大，如果再设置1.8的行高，换行会出现中间间距过大的问题，标题的行高要记得小一些：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,h6&#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.1em</span>;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</div><div class="line">&#125;</div><div class="line">p&#123;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.8em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="段间距离"><a href="#段间距离" class="headerlink" title="段间距离"></a>段间距离</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123;</div><div class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">2em</span>;</div><div class="line">    <span class="attribute">margin-top</span>: .<span class="number">7em</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">1.8em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>颜色和背景、字体、大小都息息相关。以最常见的白色背景为例，如果我们页面的字体比较粗，相对不那么深的黑色会让人更舒服，<code>#555</code>,<code>#666</code>都是不错的选择，如果你的字体很细，比如你采用<code>PingFang SC</code>，<code>font-weight: 100</code>，为了让你的网页更清楚，字体颜色不要超过<code>#333</code>。</p>
<h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2><ul>
<li>rem</li>
<li>断字处理</li>
</ul>
<h2 id="扩展资料："><a href="#扩展资料：" class="headerlink" title="扩展资料："></a>扩展资料：</h2><p><a href="https://en.wikipedia.org/wiki/List_of_typefaces_included_with_Microsoft_Windows" target="_blank" rel="external">Windows预装字体</a><br><a href="https://en.wikipedia.org/wiki/List_of_typefaces_included_with_OS_X" target="_blank" rel="external">MAC OS X预装字体</a><br><a href="http://typogui.de" target="_blank" rel="external">英文文字排版指南</a><br><a href="http://www.uisdc.com/fonts-for-quick-reading" target="_blank" rel="external">中英字体搭配</a><br><a href="http://www.cssfontstack.com" target="_blank" rel="external">寻找OS X和Windows下相似的字体</a><br><a href="http://www.modularscale.com/?16&amp;px&amp;1.5&amp;web&amp;text" target="_blank" rel="external">计算字体缩放</a><br><a href="https://www.smashingmagazine.com/2015/08/typographic-patterns-in-html-newsletter-email-design/" target="_blank" rel="external">网页排版统计</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几年有一种说法，网页95%都是排版。这种说法，即使是现在，作为Web开发人员，我们也应该足够重视排版。有时候看到一个网页，就是觉得别扭，不好看，但是作为程序员真的不知道到底哪出了问题！&lt;br&gt;要是有时间，你一定要读一下《写给大家看的设计书》，这本书里边讲了很多简单适用的设计原则，包括&lt;strong&gt;亲密性&lt;/strong&gt;，&lt;strong&gt;对齐&lt;/strong&gt;，&lt;strong&gt;重复&lt;/strong&gt;，&lt;strong&gt;对比&lt;/strong&gt;，&lt;strong&gt;颜色&lt;/strong&gt;等简单适用的原则）&lt;/p&gt;
&lt;p&gt;在没有设计师帮助下，排版和颜色经常是最让我头疼的事，怎么放怎么挑都觉得没有人家专业学设计的好看，但是后来发现，有一些规则，可以快速地让设计看起来更加专业。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lhyum.com/demo/lesson_1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简单文字排版：&lt;/a&gt;&lt;a href=&quot;http://www.lhyum.com/demo/lesson_1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.lhyum.com/demo/lesson_1/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;字体选择&quot;&gt;&lt;a href=&quot;#字体选择&quot; class=&quot;headerlink&quot; title=&quot;字体选择&quot;&gt;&lt;/a&gt;字体选择&lt;/h2&gt;&lt;p&gt;好的字体，会帮助你的网页看起来更加输入自然。&lt;br&gt;在网页中，中文字体的选择一直都是一个麻烦事，选择中文字体时，你需要考虑到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户本地的字体有限，你需要兼容不同的操作系统。对于Windows而言，可能就只有预装的&lt;code&gt;宋体、黑体、楷体、仿宋、微软雅黑&lt;/code&gt;，如果你网页用了OS X的&lt;code&gt;Helvetica&lt;/code&gt;，在Windows，用户实际看到的是&lt;code&gt;Arial&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;中文字体体积太大，使用Web Font好像不划算。英文就只有26个字母，但是中文常用汉字就有几千呀，为了看个几百K的网页，要下载几兆的字体，你觉得真的合适么？&lt;/li&gt;
&lt;li&gt;不同浏览器对字体的支持也不一样，还没有一种通吃所有浏览器的字体格式（这算是Web Font难做的原因）&lt;br&gt; &lt;img src=&quot;http://7fvhf8.com1.z0.glb.clouddn.com/blog/20150127172229900.png&quot; alt=&quot;浏览器支持的字体格式&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决方法基本有三个：&quot;&gt;&lt;a href=&quot;#解决方法基本有三个：&quot; class=&quot;headerlink&quot; title=&quot;解决方法基本有三个：&quot;&gt;&lt;/a&gt;解决方法基本有三个：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;最简单的方法，老老实实制定安全的字体，利用好fallback。&lt;/li&gt;
&lt;li&gt;寻找相似字体，你可以在&lt;a href=&quot;http://www.cssfontstack.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS Font Stack&lt;/a&gt;，查找Windows和Mac上相似的字体&lt;/li&gt;
&lt;li&gt;还是利用Web Font，推荐&lt;a href=&quot;http://font-spider.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;font spider&lt;/a&gt;，能够解决大小和兼容性的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;字蛛通过分析本地 CSS 与 HTML 文件获取 WebFont 中没有使用的字符，并将这些字符数据从字体中删除以实现压缩，同时生成跨浏览器使用的格式。    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;字体fallback&quot;&gt;&lt;a href=&quot;#字体fallback&quot; class=&quot;headerlink&quot; title=&quot;字体fallback&quot;&gt;&lt;/a&gt;字体fallback&lt;/h3&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://www.voyax.me/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>《程序员修炼之道》读书笔记——如何靠自己成为高手</title>
    <link href="http://www.voyax.me/posts/32157/"/>
    <id>http://www.voyax.me/posts/32157/</id>
    <published>2016-09-06T17:26:33.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="成为高手需要条件"><a href="#成为高手需要条件" class="headerlink" title="成为高手需要条件"></a>成为高手需要条件</h2><p>“衣带渐宽终不悔，为伊消得人憔悴”，一个中手，没有码过几十万行代码，或者长期在一个高手的团队里打磨锤炼，无论理论多熟悉多能说，都只算是中手。而若是有高人点拨，很快就能蓦然回首。<br>但现实是，高手太少，能指导你的高手更少；读书和实践是弥补没有高手最好的方法。</p>
<h2 id="在实践中主动回顾你大脑中的那些编程原则、技巧"><a href="#在实践中主动回顾你大脑中的那些编程原则、技巧" class="headerlink" title="在实践中主动回顾你大脑中的那些编程原则、技巧"></a>在实践中主动回顾你大脑中的那些编程原则、技巧</h2><p>在大学你就该知道什么是面向对象，什么是软件工程，但是不经过实际项目的锤炼，很难真正理解面向对象的优雅所在。内化是一个非常复杂的认知过程，本身涉及大脑中mind set 和 paradign的切换，所以必然不是一个简单的隔夜就能完成的过程。但一旦切换完成，事件中自然会流漏出这种新的认识，也就是到了一个新的境界。（如果真的理解了，你会发现更多精妙有趣的技巧，已经可以主动输出知识了）。<br><a id="more"></a></p>
<h2 id="如何实践"><a href="#如何实践" class="headerlink" title="如何实践"></a>如何实践</h2><p>我们常常会“忘了”应该怎么正确地做一件事情（这里的忘了，指我们之前从书或者其他渠道看到的正确的原则或方法，但是在那一刻脑子里根本没有考虑过这个原则或方法，因为根本没有亲自实践过，所以根本不是自己的一部分，不属于自己）。但如果有人在恰当的时候讲这些原则或在方法给你指点出来，你会恍然大悟，<br>但是，当没有人指点的时候，要学会自己提醒自己。在阅读很多书的时候，不要想当然地以为，“啊，这个我知道了，啊，那个我了解了，嗯，这个以后要注意”，这样的阅读方式只会强化<strong>原有的自己已经知道的部分</strong>，而不大可能把“以后要注意”这东西全部内化。所以，自负的读者读完之后必然觉得“哈哈，高手不过如此，大部分我也知道嘛”，而不是“是的，我还有不少要注意”，这两种态度，就把高手和易于满足的中手永恒的分开了。<br><strong>想要内化这些小声音，还是要靠事实践，即使你把这些小声音写在100块钱的高档笔记本上也没有用</strong>。<br>正确的做法是，先大致理解和记住里边的Tip，然后每周争取实践2-3个Tip，你需要</p>
<ul>
<li>自动频繁地测试</li>
<li>别手动做繁琐的工作</li>
</ul>
<h2 id="对于我"><a href="#对于我" class="headerlink" title="对于我"></a>对于我</h2><p>其实再多的道理，如果没有实践都是纸上谈兵；而只是埋头写代码，看别人的博客，也很难以形成自己的知识体系。之所以很多企业不喜欢培训班出来的学院，不是因为他们不能干活，而是主动学习能力和即使没有太多项目经验的科班学生是不能比的，当扔给他们一个新的技术栈，很多人就和白纸一样，而你的leader需要看到的是有自己的知识体系和学习方法，能够快速利用现有的认知能力解剖这个新知识。而这种能力是建立在长期以来形成的良好思考习惯而非死记硬背下的。拿前端来说，你可以不会Angular，也可以不会React，但是你会的，需要看到你的深入和自己的东西。<br>所以呢，学代码，要实战+看书，两者都很重要。<br>现在我的习惯是，白天工作写代码，觉得一知半解的，先解决问题，再放到专门整理的问题集中，晚上10点以后，就是解决问题，可能一个问题需要花好几天晚上，但是每天必须保持至少半个小时的读书时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;成为高手需要条件&quot;&gt;&lt;a href=&quot;#成为高手需要条件&quot; class=&quot;headerlink&quot; title=&quot;成为高手需要条件&quot;&gt;&lt;/a&gt;成为高手需要条件&lt;/h2&gt;&lt;p&gt;“衣带渐宽终不悔，为伊消得人憔悴”，一个中手，没有码过几十万行代码，或者长期在一个高手的团队里打磨锤炼，无论理论多熟悉多能说，都只算是中手。而若是有高人点拨，很快就能蓦然回首。&lt;br&gt;但现实是，高手太少，能指导你的高手更少；读书和实践是弥补没有高手最好的方法。&lt;/p&gt;
&lt;h2 id=&quot;在实践中主动回顾你大脑中的那些编程原则、技巧&quot;&gt;&lt;a href=&quot;#在实践中主动回顾你大脑中的那些编程原则、技巧&quot; class=&quot;headerlink&quot; title=&quot;在实践中主动回顾你大脑中的那些编程原则、技巧&quot;&gt;&lt;/a&gt;在实践中主动回顾你大脑中的那些编程原则、技巧&lt;/h2&gt;&lt;p&gt;在大学你就该知道什么是面向对象，什么是软件工程，但是不经过实际项目的锤炼，很难真正理解面向对象的优雅所在。内化是一个非常复杂的认知过程，本身涉及大脑中mind set 和 paradign的切换，所以必然不是一个简单的隔夜就能完成的过程。但一旦切换完成，事件中自然会流漏出这种新的认识，也就是到了一个新的境界。（如果真的理解了，你会发现更多精妙有趣的技巧，已经可以主动输出知识了）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何实践&quot;&gt;&lt;a href=&quot;#如何实践&quot; class=&quot;headerlink&quot; title=&quot;如何实践&quot;&gt;&lt;/a&gt;如何实践&lt;/h2&gt;&lt;p&gt;我们常常会“忘了”应该怎么正确地做一件事情（这里的忘了，指我们之前从书或者其他渠道看到的正确的原则或方法，但是在那一刻脑子里根本没有考虑过这个原则或方法，因为根本没有亲自实践过，所以根本不是自己的一部分，不属于自己）。但如果有人在恰当的时候讲这些原则或在方法给你指点出来，你会恍然大悟，&lt;br&gt;但是，当没有人指点的时候，要学会自己提醒自己。在阅读很多书的时候，不要想当然地以为，“啊，这个我知道了，啊，那个我了解了，嗯，这个以后要注意”，这样的阅读方式只会强化&lt;strong&gt;原有的自己已经知道的部分&lt;/strong&gt;，而不大可能把“以后要注意”这东西全部内化。所以，自负的读者读完之后必然觉得“哈哈，高手不过如此，大部分我也知道嘛”，而不是“是的，我还有不少要注意”，这两种态度，就把高手和易于满足的中手永恒的分开了。&lt;br&gt;&lt;strong&gt;想要内化这些小声音，还是要靠事实践，即使你把这些小声音写在100块钱的高档笔记本上也没有用&lt;/strong&gt;。&lt;br&gt;正确的做法是，先大致理解和记住里边的Tip，然后每周争取实践2-3个Tip，你需要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动频繁地测试&lt;/li&gt;
&lt;li&gt;别手动做繁琐的工作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;对于我&quot;&gt;&lt;a href=&quot;#对于我&quot; class=&quot;headerlink&quot; title=&quot;对于我&quot;&gt;&lt;/a&gt;对于我&lt;/h2&gt;&lt;p&gt;其实再多的道理，如果没有实践都是纸上谈兵；而只是埋头写代码，看别人的博客，也很难以形成自己的知识体系。之所以很多企业不喜欢培训班出来的学院，不是因为他们不能干活，而是主动学习能力和即使没有太多项目经验的科班学生是不能比的，当扔给他们一个新的技术栈，很多人就和白纸一样，而你的leader需要看到的是有自己的知识体系和学习方法，能够快速利用现有的认知能力解剖这个新知识。而这种能力是建立在长期以来形成的良好思考习惯而非死记硬背下的。拿前端来说，你可以不会Angular，也可以不会React，但是你会的，需要看到你的深入和自己的东西。&lt;br&gt;所以呢，学代码，要实战+看书，两者都很重要。&lt;br&gt;现在我的习惯是，白天工作写代码，觉得一知半解的，先解决问题，再放到专门整理的问题集中，晚上10点以后，就是解决问题，可能一个问题需要花好几天晚上，但是每天必须保持至少半个小时的读书时间。&lt;/p&gt;

    
    </summary>
    
    
      <category term="读书" scheme="http://www.voyax.me/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《程序员修炼之道》读书笔记——如何靠自己成为高手</title>
    <link href="http://www.voyax.me/posts/32156/"/>
    <id>http://www.voyax.me/posts/32156/</id>
    <published>2016-09-06T17:26:33.000Z</published>
    <updated>2017-06-18T09:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="成为高手需要条件"><a href="#成为高手需要条件" class="headerlink" title="成为高手需要条件"></a>成为高手需要条件</h2><p>“衣带渐宽终不悔，为伊消得人憔悴”，一个中手，没有码过几十万行代码，或者长期在一个高手的团队里打磨锤炼，无论理论多熟悉多能说，都只算是中手。而若是有高人点拨，很快就能蓦然回首。</p>
<p>但现实是，高手太少，能指导你的高手更少；读书和实践是弥补没有高手最好的方法。</p>
<h2 id="在实践中主动回顾你大脑中的那些编程原则、技巧"><a href="#在实践中主动回顾你大脑中的那些编程原则、技巧" class="headerlink" title="在实践中主动回顾你大脑中的那些编程原则、技巧"></a>在实践中主动回顾你大脑中的那些编程原则、技巧</h2><p>在大学你就该知道什么是面向对象，什么是软件工程，但是不经过实际项目的锤炼，很难真正理解面向对象的优雅所在。内化是一个非常复杂的认知过程，本身涉及大脑中mind set 和 paradign的切换，所以必然不是一个简单的隔夜就能完成的过程。但一旦切换完成，事件中自然会流漏出这种新的认识，也就是到了一个新的境界。（如果真的理解了，你会发现更多精妙有趣的技巧，已经可以主动输出知识了）。</p>
<h2 id="学会将理论内化"><a href="#学会将理论内化" class="headerlink" title="学会将理论内化"></a>学会将理论内化</h2><p>我们常常会“忘了”应该怎么正确地做一件事情（这里的忘了，指我们之前从书或者其他渠道看到的正确的原则或方法，但是在那一刻脑子里根本没有考虑过这个原则或方法，因为根本没有亲自实践过，所以根本不是自己的一部分，不属于自己）。但如果有人在恰当的时候讲这些原则或在方法给你指点出来，你会恍然大悟，</p>
<p>但是，当没有人指点的时候，要学会自己提醒自己。在阅读很多书的时候，不要想当然地以为，“啊，这个我知道了，啊，那个我了解了，嗯，这个以后要注意”，这样的阅读方式只会强化原有的自己已经知道的部分，而不大可能把“以后要注意”这东西全部内化。所以，自负的读者读完之后必然觉得“哈哈，高手不过如此，大部分我也知道嘛”，而不是“是的，我还有不少要注意”，这两种态度，就把高手和易于满足的中手永恒的分开了。</p>
<p>想要内化这些小声音，还是要靠事实践，即使你把这些小声音写在100块钱的高档笔记本上也没有用。</p>
<p>正确的做法是，先大致理解和记住里边的Tip，然后每周争取实践2-3个Tip，你需要</p>
<ul>
<li><strong>自动频繁地测试</strong></li>
<li><strong>别手动做繁琐的工作</strong></li>
</ul>
<h2 id="保持良好的作息习惯"><a href="#保持良好的作息习惯" class="headerlink" title="保持良好的作息习惯"></a>保持良好的作息习惯</h2><p>其实再多的道理，如果没有实践都是纸上谈兵；而只是埋头写代码，看别人的博客，也很难以形成自己的知识体系。之所以很多企业不喜欢培训班出来的学院，不是因为他们不能干活，而是主动学习能力和即使没有太多项目经验的科班学生是不能比的，当扔给他们一个新的技术栈，很多人就和白纸一样，而你的leader需要看到的是有自己的知识体系和学习方法，能够快速利用现有的认知能力解剖这个新知识。而这种能力是建立在长期以来形成的良好思考习惯而非死记硬背下的。拿前端来说，你可以不会Angular，也可以不会React，但是你会的，需要看到你的深入和自己的东西。</p>
<p>所以呢，学代码，要实战+看书，两者都很重要。</p>
<p>现在创业中，还是要保持良好的作息习惯，白天工作写代码，觉得一知半解的，先解决问题，再放到专门整理的问题集中，晚上10点以后，就是解决问题，可能一个问题需要花好几天晚上，但是每天必须保持至少半个小时的读书时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;成为高手需要条件&quot;&gt;&lt;a href=&quot;#成为高手需要条件&quot; class=&quot;headerlink&quot; title=&quot;成为高手需要条件&quot;&gt;&lt;/a&gt;成为高手需要条件&lt;/h2&gt;&lt;p&gt;“衣带渐宽终不悔，为伊消得人憔悴”，一个中手，没有码过几十万行代码，或者长期在一个高手的团队里打磨锤炼，无论理论多熟悉多能说，都只算是中手。而若是有高人点拨，很快就能蓦然回首。&lt;/p&gt;
&lt;p&gt;但现实是，高手太少，能指导你的高手更少；读书和实践是弥补没有高手最好的方法。&lt;/p&gt;
&lt;h2 id=&quot;在实践中主动回顾你大脑中的那些编程原则、技巧&quot;&gt;&lt;a href=&quot;#在实践中主动回顾你大脑中的那些编程原则、技巧&quot; class=&quot;headerlink&quot; title=&quot;在实践中主动回顾你大脑中的那些编程原则、技巧&quot;&gt;&lt;/a&gt;在实践中主动回顾你大脑中的那些编程原则、技巧&lt;/h2&gt;&lt;p&gt;在大学你就该知道什么是面向对象，什么是软件工程，但是不经过实际项目的锤炼，很难真正理解面向对象的优雅所在。内化是一个非常复杂的认知过程，本身涉及大脑中mind set 和 paradign的切换，所以必然不是一个简单的隔夜就能完成的过程。但一旦切换完成，事件中自然会流漏出这种新的认识，也就是到了一个新的境界。（如果真的理解了，你会发现更多精妙有趣的技巧，已经可以主动输出知识了）。&lt;/p&gt;
&lt;h2 id=&quot;学会将理论内化&quot;&gt;&lt;a href=&quot;#学会将理论内化&quot; class=&quot;headerlink&quot; title=&quot;学会将理论内化&quot;&gt;&lt;/a&gt;学会将理论内化&lt;/h2&gt;&lt;p&gt;我们常常会“忘了”应该怎么正确地做一件事情（这里的忘了，指我们之前从书或者其他渠道看到的正确的原则或方法，但是在那一刻脑子里根本没有考虑过这个原则或方法，因为根本没有亲自实践过，所以根本不是自己的一部分，不属于自己）。但如果有人在恰当的时候讲这些原则或在方法给你指点出来，你会恍然大悟，&lt;/p&gt;
&lt;p&gt;但是，当没有人指点的时候，要学会自己提醒自己。在阅读很多书的时候，不要想当然地以为，“啊，这个我知道了，啊，那个我了解了，嗯，这个以后要注意”，这样的阅读方式只会强化原有的自己已经知道的部分，而不大可能把“以后要注意”这东西全部内化。所以，自负的读者读完之后必然觉得“哈哈，高手不过如此，大部分我也知道嘛”，而不是“是的，我还有不少要注意”，这两种态度，就把高手和易于满足的中手永恒的分开了。&lt;/p&gt;
&lt;p&gt;想要内化这些小声音，还是要靠事实践，即使你把这些小声音写在100块钱的高档笔记本上也没有用。&lt;/p&gt;
&lt;p&gt;正确的做法是，先大致理解和记住里边的Tip，然后每周争取实践2-3个Tip，你需要&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://www.voyax.me/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装配置redis</title>
    <link href="http://www.voyax.me/posts/22544/"/>
    <id>http://www.voyax.me/posts/22544/</id>
    <published>2016-08-29T12:31:13.000Z</published>
    <updated>2017-06-18T09:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>系统：OS X EI 10.11.6<br>安装方式：Homebrew</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> brew install redis</span></div></pre></td></tr></table></figure>
<h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ln -sfv /usr/<span class="built_in">local</span>/opt/redis/*.plist ~/Library/LaunchAgents</span></div></pre></td></tr></table></figure>
<h3 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h3><ul>
<li><p><code>ln</code>干嘛的 =&gt; 为文件创建连接，可以创建<strong>软链接</strong>和创建<strong>硬链接</strong>。通过参数<code>-s</code>创建软链接，软链接可以理解为Windows下的快捷方式，实际是路径<code>path</code>。不加参数默认创建硬链接，硬链接指向的是源文件的节点<code>inode</code>，所以修改文件会所有都会同步改变</p>
</li>
<li><p>关于删除的影响：我们所说的文件，并非实际存储空间，而是文件节点，操作系统通过i-node查找到文件的block。删除源文件对于硬链接来说是不会丢失文件，这是硬链接会变成普通文件；至于软链接和Windows上一样</p>
</li>
<li><p>更多有意思的讨论，详见<a href="http://www.chinaunix.net/old_jh/4/461282.html" target="_blank" rel="external">ChinaUnix</a></p>
</li>
</ul>
<blockquote>
<p>另外launchctl是mac下用来定时执行任务的，而任务的具体的事件、时间等通过<code>.plist</code>指定</p>
</blockquote>
<h2 id="定制redis-server的配置文件"><a href="#定制redis-server的配置文件" class="headerlink" title="定制redis-server的配置文件"></a>定制redis-server的配置文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$redis</span>-server <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>redis.conf</div></pre></td></tr></table></figure>
<ul>
<li>设置密码<br>在配置文件<code>/usr/local/etc/redis.conf</code> 设置 requirepass的值</li>
</ul>
<p>一年没碰redis了，以前的配置已丢，暂时不需要，之后根据实际补充</p>
<h2 id="卸载redis"><a href="#卸载redis" class="headerlink" title="卸载redis"></a>卸载redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> brew uninstall redis</span></div><div class="line"><span class="meta">$</span><span class="bash"> rm ~/Library/LaunchAgents/homebrew.mxcl.redis.plist</span></div></pre></td></tr></table></figure>
<h2 id="查看redis是否启动"><a href="#查看redis是否启动" class="headerlink" title="查看redis是否启动"></a>查看redis是否启动</h2><pre><code class="shell"><span class="meta">$</span><span class="bash"> redis-cli ping</span>
</code></pre>
<p>如果输出<code>PONG</code>，redis已经启动了</p>
<h2 id="启动、停止、重启"><a href="#启动、停止、重启" class="headerlink" title="启动、停止、重启"></a>启动、停止、重启</h2><ul>
<li><p>启动<br><code>brew services start redis</code></p>
</li>
<li><p>停止<br><code>stop brew services stop redis</code></p>
</li>
<li><p>重启<br><code>restart brew services restart redis</code></p>
</li>
</ul>
<p>（之前有人说<code>homebrew services</code>被废了，但是现在又回来了，详见<a href="https://github.com/Homebrew/homebrew-services" target="_blank" rel="external">官方文档</a>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统：OS X EI 10.11.6&lt;br&gt;安装方式：Homebrew&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; brew install redis&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;开机启动&quot;&gt;&lt;a href=&quot;#开机启动&quot; class=&quot;headerlink&quot; title=&quot;开机启动&quot;&gt;&lt;/a&gt;开机启动&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; ln -sfv /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/opt/redis/*.plist ~/Library/LaunchAgents&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;额外补充&quot;&gt;&lt;a href=&quot;#额外补充&quot; class=&quot;headerlink&quot; title=&quot;额外补充&quot;&gt;&lt;/a&gt;额外补充&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ln&lt;/code&gt;干嘛的 =&amp;gt; 为文件创建连接，可以创建&lt;strong&gt;软链接&lt;/strong&gt;和创建&lt;strong&gt;硬链接&lt;/strong&gt;。通过参数&lt;code&gt;-s&lt;/code&gt;创建软链接，软链接可以理解为Windows下的快捷方式，实际是路径&lt;code&gt;path&lt;/code&gt;。不加参数默认创建硬链接，硬链接指向的是源文件的节点&lt;code&gt;inode&lt;/code&gt;，所以修改文件会所有都会同步改变&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于删除的影响：我们所说的文件，并非实际存储空间，而是文件节点，操作系统通过i-node查找到文件的block。删除源文件对于硬链接来说是不会丢失文件，这是硬链接会变成普通文件；至于软链接和Windows上一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更多有意思的讨论，详见&lt;a href=&quot;http://www.chinaunix.net/old_jh/4/461282.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ChinaUnix&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;另外launchctl是mac下用来定时执行任务的，而任务的具体的事件、时间等通过&lt;code&gt;.plist&lt;/code&gt;指定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;定制redis-server的配置文件&quot;&gt;&lt;a href=&quot;#定制redis-server的配置文件&quot; class=&quot;headerlink&quot; title=&quot;定制redis-server的配置文件&quot;&gt;&lt;/a&gt;定制redis-server的配置文件&lt;/h2&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$redis&lt;/span&gt;-server &lt;span class=&quot;regexp&quot;&gt;/usr/&lt;/span&gt;local&lt;span class=&quot;regexp&quot;&gt;/etc/&lt;/span&gt;redis.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="环境配置" scheme="http://www.voyax.me/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>分支管理规范</title>
    <link href="http://www.voyax.me/posts/undefined/"/>
    <id>http://www.voyax.me/posts/undefined/</id>
    <published>2016-08-12T15:04:05.000Z</published>
    <updated>2016-08-12T15:14:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码仓库Git规范，主要涉及Git分支管理策略，命名规范以及权限控制。每个团队成员必须遵循这些规范以保证开发的可靠。</p>
<p>分支策略如下图：<br><img src="http://7fvhf8.com1.z0.glb.clouddn.com/blog/git-branch.png" style="width: 70%;"></p>
<p>一个中心版本库，至少包括两个分支：<strong>master(主分支)</strong> 和 <strong>develop(开发分支)</strong> ；随着开发的需要，还包括三类 <strong>特性分支</strong>:</p>
<ul>
<li>feature branches(特性分支)</li>
<li>release braches（预发布分支）</li>
<li>hotfixes branches（热补丁分支）</li>
</ul>
<a id="more"></a>
<h2 id="主分支master"><a href="#主分支master" class="headerlink" title="主分支master"></a>主分支master</h2><p>只允许在master分支上保存完全稳定的代码。<br>当release分支保持稳定状态，或者某些特性分支完成所有测试，合并入master分支，并且使用 <strong>版本号</strong> 打上 <strong>标签</strong> 。<br>（master分支只有管理员拥有权限进行push）</p>
<h2 id="开发分支develop"><a href="#开发分支develop" class="headerlink" title="开发分支develop"></a>开发分支develop</h2><p>开发分支与master分支平行，用于测试开发。<br>开发中绝大多数分支都应该是源于develop分支</p>
<h2 id="特性分支"><a href="#特性分支" class="headerlink" title="特性分支"></a>特性分支</h2><p>短期分支，用于实现单一特性或相关工作。开发完成后，合并到主干分支（develop或master），然后删除。<br>特性分支 <strong>只存在</strong> 于开发者仓库，不出现在orgin中。<br>基本步骤：</p>
<p>从develop 新建特性分支</p>
<pre><code>git checkout -b feature-* develop
</code></pre><p>切换分支</p>
<pre><code>git checkout develop
</code></pre><p>分支合并，注意 <strong>–no-ff</strong></p>
<p>git merge –no-ff feature-*</p>
<p>删除分支</p>
<pre><code>git branch -d feature-*
</code></pre><p>分支命名规范：feature-*，function-*，feature-*</p>
<h3 id="功能分支-feature"><a href="#功能分支-feature" class="headerlink" title="功能分支 feature"></a>功能分支 feature</h3><p>来源：develop<br>合并回： develop<br>描述：用于开发特定功能。</p>
<h3 id="热补丁分支-hotfixes"><a href="#热补丁分支-hotfixes" class="headerlink" title="热补丁分支 hotfixes"></a>热补丁分支 hotfixes</h3><p>来源： master<br>合并回：develop和master<br>描述：用于修复bug。<br><strong>注意</strong>：</p>
<ol>
<li>创建热补丁后必须设置一个新的版本号（比如当前master分支tag V.1.2，提交绑定后标记V1.2.1）</li>
<li>hotfixex 必须合并回master分值和develop分支，保证在下个版本中包含修复补丁。</li>
</ol>
<h3 id="预发布分支-release"><a href="#预发布分支-release" class="headerlink" title="预发布分支 release"></a>预发布分支 release</h3><p>来源：develop<br>合并回： develop和master<br>命名： release-版本号<br>描述：用于发布前的测试<br><strong>注意</strong>：<br>release分支存在期间，如需新增功能，必须合并到develop分支，release保持当前版本特性。</p>
<h2 id="Git学习资料"><a href="#Git学习资料" class="headerlink" title="Git学习资料"></a>Git学习资料</h2><p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">git pro第二版</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码仓库Git规范，主要涉及Git分支管理策略，命名规范以及权限控制。每个团队成员必须遵循这些规范以保证开发的可靠。&lt;/p&gt;
&lt;p&gt;分支策略如下图：&lt;br&gt;&lt;img src=&quot;http://7fvhf8.com1.z0.glb.clouddn.com/blog/git-branch.png&quot; style=&quot;width: 70%;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个中心版本库，至少包括两个分支：&lt;strong&gt;master(主分支)&lt;/strong&gt; 和 &lt;strong&gt;develop(开发分支)&lt;/strong&gt; ；随着开发的需要，还包括三类 &lt;strong&gt;特性分支&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feature branches(特性分支)&lt;/li&gt;
&lt;li&gt;release braches（预发布分支）&lt;/li&gt;
&lt;li&gt;hotfixes branches（热补丁分支）&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;主分支master&quot;&gt;&lt;a href=&quot;#主分支master&quot; class=&quot;headerlink&quot; title=&quot;主分支master&quot;&gt;&lt;/a&gt;主分支master&lt;/h2&gt;&lt;p&gt;只允许在master分支上保存完全稳定的代码。&lt;br&gt;当release分支保持稳定状态，或者某些特性分支完成所有测试，合并入master分支，并且使用 &lt;strong&gt;版本号&lt;/strong&gt; 打上 &lt;strong&gt;标签&lt;/strong&gt; 。&lt;br&gt;（master分支只有管理员拥有权限进行push）&lt;/p&gt;
&lt;h2 id=&quot;开发分支develop&quot;&gt;&lt;a href=&quot;#开发分支develop&quot; class=&quot;headerlink&quot; title=&quot;开发分支develop&quot;&gt;&lt;/a&gt;开发分支develop&lt;/h2&gt;&lt;p&gt;开发分支与master分支平行，用于测试开发。&lt;br&gt;开发中绝大多数分支都应该是源于develop分支&lt;/p&gt;
&lt;h2 id=&quot;特性分支&quot;&gt;&lt;a href=&quot;#特性分支&quot; class=&quot;headerlink&quot; title=&quot;特性分支&quot;&gt;&lt;/a&gt;特性分支&lt;/h2&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.voyax.me/tags/git/"/>
    
  </entry>
  
</feed>
